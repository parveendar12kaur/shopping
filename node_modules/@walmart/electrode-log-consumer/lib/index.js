"use strict";
//
// Hapi plugin for consuming client side logs
//
const Boom = require("boom");
const _ = require("lodash");
const pathJoin = require("path").posix.join;

function logConsumer(server, options, next) {
  const HTTP_SUCCESS = 200;

  const config = server.app.config;
  const fullApiPath = (path) => {
    const ui = config && config.ui || {};
    return pathJoin(ui.basePath || "", ui.apiPath || "/api", path);
  };

  const loggerPath = fullApiPath("/logger");

  server.ext("onRequest", (request, reply) => {
    if (request.path === loggerPath) {
      request.app.disableTransactions = true;
    }
    reply.continue();
  }, {
    before: "logging"
  });

  server.route({
    method: "POST",
    path: loggerPath,
    config: {
      plugins: {
        "@walmart/csrf-jwt": {
          enabled: false
        }
      }
    },
    handler: function (req, reply) {

      if (!req.payload) {
        req.log(["WARN"], "Logging payload missing, ignoring.");
        return reply(Boom.badRequest("Payload missing"));
      }
      const logs = _.isArray(req.payload) ? req.payload : [req.payload];

      _.each(logs, (log) => {
        if (!log || !log.tags || !log.data) {
          req.log(["WARN"], "Logging payload malformed, skipping.");
          return;
        }

        req.log(log.tags, log.data);
      });

      reply({
        status: "ok"
      }).code(HTTP_SUCCESS);
    }
  });

  next();
}

logConsumer.attributes = {
  pkg: {
    name: "logConsumer"
  }
};

module.exports = logConsumer;
