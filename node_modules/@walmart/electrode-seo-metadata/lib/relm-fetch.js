"use strict";

/* eslint-disable no-magic-numbers, consistent-return */

const pageTypes = require("./page-types").pageTypes;

const _ = require("lodash");

const typeToRegexMap = {
  browse: new RegExp("^/(?:browse|search)/(?:[^/]+/){0,2}([0-9_]+)?"),
  category: new RegExp("^/(?:category|cp)/(?:[^/]+/)?(\\d+)?"),
  item: new RegExp("^/(?:product|ip)/(?:[^/]+/)?(\\d+)"),
  topic: new RegExp("^/(?:topic|tp|c)/(?:[^/]+/)?([a-zA-Z-_]+)")
};

const typeToRelmMap = {
  browse: "browse-relm",
  category: "category-relm",
  item: "product-relm",
  topic: "topic-relm"
};

const DEFAULT_TIMEOUT = 900;

class RelmFetch {
  constructor(options, cb) {
    this.tag = "SEO Relm fetch";
    this.setup(options);

    if (cb) {
      if (!this.url) {
        return cb(Error("Invalid url"));
      } else {
        return this.fetch(
          {
            compress: true,
            noInject: true,
            timeout: this.timeout
          },
          cb
        );
      }
    }
  }

  setup(options) {
    this.request = options.request;
    this.sourceUrl = options.sourceUrl;
    this.serverUrl = _.get(options, "config.serverUrl");
    this.timeout = options.timeout || DEFAULT_TIMEOUT;
    this.tenant = options.tenant;

    this.pageType = pageTypes.default;
    this.pageId = _.get(options, "query.cat_id");

    if (!_.isEmpty(this.sourceUrl)) {
      const typeAndId = RelmFetch.derivePageFromPath(this.sourceUrl);
      this.pageType = typeAndId.type;

      if (typeAndId.id) {
        this.pageId = typeAndId.id;
      }
    }

    if (this.pageType && this.pageId && this.tenant) {
      this.url = [this.serverUrl, this.tenant, typeToRelmMap[this.pageType], this.pageId].join("/");
    } else {
      this.url = null;
    }
  }

  getUrl() {
    return this.url;
  }

  static derivePageFromPath(path) {
    let id = null;
    let type = pageTypes.default;

    if (path) {
      _.each(typeToRegexMap, (pattern, key) => {
        if (key === "browse" && _.startsWith(path, "/search/autocomplete/")) {
          return false;
        }

        const found = path.match(pattern);

        if (found) {
          id = found[1];
          type = key;
          return false; // break
        }
      });
    }

    return { id, type };
  }
}

RelmFetch.prototype.fetch = require("./fetch").fetch;

module.exports = {
  relmFetch: (options, cb) => new RelmFetch(options, cb),
  _RelmFetch: RelmFetch
};
