"use strict";

/* eslint-disable no-magic-numbers */

const ElectrodeFetch = require("@walmart/electrode-fetch");
const _ = require("lodash");

const MS_IN_HR = 3600000;
const UPDATE_INTERVAL_HOURS = 6;

let categoryPathMap = {};
let ccmConfig;
let logger = () => console.log; //eslint-disable-line

const setConfig = config => {
  ccmConfig = config;
};

const setLogger = _logger => (logger = _logger);

const getConfig = () => {
  return ccmConfig;
};

const update = () => {
  if (!ccmConfig) {
    logger(["warn"], "Trying to update category-cache but ccm config missing.");
    return null;
  }

  const cpUrl = ccmConfig["metadata.category_canonicals_data_path"];

  if (!cpUrl) {
    logger(
      ["warn"],
      "Trying to update category-cache but CCM metadata.category_canonicals_data_path missing"
    );
    return null;
  }

  return ElectrodeFetch.fetch(cpUrl, { noInject: true }, r => r.text()).then(
    resp => {
      categoryPathMap = {};
      const lines = resp.split("\n");

      // Parse and cache the custom mapping
      _.each(lines, line => {
        const mapping = line.split("||");
        if (mapping.length === 2) {
          categoryPathMap[mapping[0]] = mapping[1].trim();
        }
      });

      logger(["debug"], `Loaded category cache with ${lines.length} entries.`);
    },
    () => {
      logger(["error"], `Failed to fetch category data from: ${cpUrl}`);
    }
  );
};

const size = () => {
  return Object.keys(categoryPathMap).length;
};

const resolveCategoryPath = id => {
  const path = categoryPathMap[id] || `/cp/${id}`;
  return `https://www.walmart.com${path}`;
};

// Update category map every 6 hours
const interval = setInterval(update, UPDATE_INTERVAL_HOURS * MS_IN_HR);
interval.unref();

module.exports = {
  resolveCategoryPath,
  setConfig,
  setLogger,
  update,
  getConfig,
  size
};
