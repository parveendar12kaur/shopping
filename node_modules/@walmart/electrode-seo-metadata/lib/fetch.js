"use strict";

/* eslint-disable no-invalid-this */

const optionalRequire = require("optional-require")(require);
const logTransaction = optionalRequire("@walmart/electrode-log-transaction");
const fyi = require("@walmart/electrode-fyi");
const ElectrodeFetch = require("@walmart/electrode-fetch");
const nullTransaction = require("./null-transaction");

let fetch;

/*
 * Add optional dependency on electrode-log-transaction and changes
 * electrode-logging to a peerDependencies on any version.
 *
 * If electrode-log-transaction is available then uses it to log transaction
 * when fetching. Otherwise will automatically detect if electrode-logging
 * supports transaction and uses it.
 *
 * If no transaction support is detected then fall back to no transaction logging.
 */

if (logTransaction) {
  fyi.info("electrode-seo-metadata: Using @walmart/electrode-log-transaction");
  fetch = function(options, cb) {
    const context = logTransaction.addCall(
      this.request,
      "@walmart/electrode-seo-metadata.fetch",
      `${this.tag}: ${this.url}`
    );
    return context
      .run(() => ElectrodeFetch.fetchJSON(this.url, options))
      .then(jsonData => {
        context.end(`${this.tag} complete`);
        cb(null, jsonData);
      })
      .catch(err => {
        context.fail(`${this.tag} failed: ${err.message}`);
        cb(err);
      });
  };
} else {
  const logging = optionalRequire("@walmart/electrode-logging");
  let transaction = logging && logging.transaction;
  if (!transaction) {
    transaction = nullTransaction;
    fyi.warn("electrode-seo-metadta: no transaction logging facility available");
  }

  fetch = function(options, cb) {
    transaction.beginCall(`${this.tag}: ${this.url}`, () => {
      ElectrodeFetch.fetchJSON(this.url, options)
        .then(jsonData => {
          transaction.end(`${this.tag} complete`);
          cb(null, jsonData);
        })
        .catch(err => {
          transaction.fail(`${this.tag} failed: ${err.message}`);
          cb(err);
        });
    });
  };
}

module.exports = {
  fetch
};
