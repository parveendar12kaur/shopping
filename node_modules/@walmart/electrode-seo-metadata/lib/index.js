"use strict";

/* eslint-disable prefer-const */
const _ = require("lodash");
const Promise = require("bluebird");
const categoryCache = require("./category-cache");
const uiConfig = require("@walmart/electrode-ui-config");
const helpers = require("./helpers");
const PageMetadata = require("../dist/page-metadata");
const metadataFetch = Promise.promisify(require("./metadata-fetch").metadataFetch);
const relmFetch = Promise.promisify(require("./relm-fetch").relmFetch);

const config = {
  serviceName: "atlas-homepage",
  "+configNames": ["metadataConfig"]
};

const ccmConfigPath = "ccm.keys.root.data.metadataConfig";

const metadataStub = {
  serverUrl: "http://api.meta-data.prod.walmart.com"
};

const getTimeout = metaConfig => {
  const timeout = _.get(metaConfig, "metadata.serviceTimeoutInMs");
  return parseInt(timeout) || undefined;
};

const initCCMPoller = server => {
  const RETRY_COUNT = 5;
  const RETRY_INTERVAL = 2000;
  let id;
  let runCount = 0;

  const poller = function() {
    if (server.app.ccm.metadataConfig) {
      categoryCache.setConfig(server.app.ccm.metadataConfig);
      categoryCache.update();

      clearInterval(id);
    } else if (runCount >= RETRY_COUNT) {
      server.log(["warn"], `Failed to load SEO CCM data after ${RETRY_COUNT} attempts.`);
      clearInterval(id);
    }

    runCount++;
  };

  // start polling for ccm config
  id = setInterval(poller, RETRY_INTERVAL);
};

const seoMetadataClient = function(server, options, next) {
  _.set(server.app.config, ccmConfigPath, config);

  categoryCache.setLogger(server.log.bind(server));
  initCCMPoller(server);

  server.ext("onRequest", (request, reply) => {
    if (request.path.startsWith(uiConfig.fullApiPath())) {
      return reply.continue();
    }

    const metaOptions = {
      request,
      config: metadataStub,
      sourceUrl: request.path,
      query: request.query,
      tenant: options.tenant || "us",
      timeout: getTimeout(server.app.ccm.metadataConfig)
    };

    const seoAsync = Promise.all(
      [metadataFetch(metaOptions), relmFetch(metaOptions)].map(p => p.reflect())
    ).spread((metadataResult, relmResult) => {
      if (metadataResult.isFulfilled()) {
        _.set(request.app, "seoTags.peeps", metadataResult.value());
      }

      if (relmResult.isFulfilled()) {
        _.set(request.app, "relm", relmResult.value());
      }
    });

    request.app.seoAsync = seoAsync;

    return reply.continue();
  });

  next();
};

seoMetadataClient.attributes = {
  pkg: {
    name: "electrode-seo-metadata"
  }
};

module.exports = {
  register: seoMetadataClient,
  helpers: helpers,
  PageMetadata: PageMetadata
};
