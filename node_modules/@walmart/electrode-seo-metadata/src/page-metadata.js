"use strict";

/* eslint-disable max-statements */

const get = require("lodash/get");
const omit = require("lodash/omit");
const each = require("lodash/each");
const isString = require("lodash/isString");
const isObject = require("lodash/isObject");
const includes = require("lodash/includes");
const isFunction = require("lodash/isFunction");
const cloneDeep = require("lodash/cloneDeep");
const isNil = require("lodash/isNil");
const toLower = require("lodash/toLower");
const map = require("lodash/map");
const concat = require("lodash/concat");
const defaults = require("lodash/defaults");
const without = require("lodash/without");

const elementUtils = require("./page-element-utils");

const MAP_SERVICE_KEYS = {
  defaults: {
    pageTitle: "title",
    pageTitleSuffix: "titleSuffix"
  },
  peeps: {
    metaDesc: "description",
    metaTitle: "title",
    metaKW: "keywords",
    header: "genericHeader",
    noIndex: "robots"
  },
  preso: {
    noIndex: "robots"
  }
};

const PRESETS = {
  "og:type": "Website",
  "og:image": "http://sphotos-b.xx.fbcdn.net/hphotos-ash4/229244_10150189115584236_162217_n.jpg",
  "og:site_name": "Walmart.com",
  "fb:app_id": "105223049547814",
  "twitter:card": "summary",
  "twitter:image": "https://pbs.twimg.com/profile_images/616833885/walmart_logo_youtube_bigger.jpg",
  "twitter:site": "@walmart"
};

const DEFAULT_SOURCE_ORDER = ["iro", "preso", "defaults"];

class PageMetadata {
  constructor(seoData, options) {
    this._sources = { presets: PRESETS, defaults: {} };
    this._pending = {};
    this._setSourceOrder(get(options, "sourceOrder"));
    this.headSent = false;
    this._logger = options && options.logger ? options.logger : () => undefined;

    if (options && !options.hasOwnProperty("sourceOrder")) {
      options = omit(options, ["logger"]);
      // support earlier versions where defaults were passed as second param
      this.addSource("defaults", options, true);
    }

    each(seoData, (data, source) => this.addSource(source, data, true));

    this._refresh();
  }

  static getElementType(key) {
    return elementUtils.getElementType(key);
  }

  addSource(source, data, skipRefresh) {
    // eslint-disable-line max-statements
    if (!isString(source) || !isObject(data)) {
      if (!skipRefresh) {
        const msg = isString(source)
          ? `data for "${source}" - expected object, got ${typeof data}`
          : `source name - expected string, got ${typeof source}`;
        this._logger(["warn"], `addSource received invalid ${msg}`);
      }
      return false;
    }
    source = source.toLowerCase();

    if (!includes(this.sourceOrder, source)) {
      this._logger(["warn"], {
        msg: "Unrecognized seo metadata source cannot be added",
        knownSources: this.sourceOrder,
        source
      });
      return false;
    }

    if (isFunction(data.then)) {
      if (source === "peeps") {
        this._peepsPromise = data;
      }
      return data.then(resolvedData => this.addSource(source, resolvedData)).catch(err => {
        this._logger(["warn"], { msg: "Page metadata source rejected", source, err });
      });
    }

    this._warnHeadSent(source);

    this._sources[source] = {};
    each(data, (value, serviceKey) => {
      const key = get(MAP_SERVICE_KEYS, [source, serviceKey], serviceKey);

      if (serviceKey === "noIndex") {
        value = value ? "noindex" : "";
      }
      this._sources[source][key] = value;
    });

    if (!skipRefresh) {
      this._refresh();
    }
    return true;
  }

  onPeepsData() {
    return this._peepsPromise ? this._peepsPromise.reflect().return() : Promise.resolve();
  }

  get(key) {
    return get(this._metadata, key);
  }

  set(key, value, skipRefresh) {
    this._sources.defaults[key] = value;
    if (!skipRefresh) {
      this._warnHeadSent("defaults");
      this._refresh();
    }
  }

  setDefaults(def) {
    each(def, (val, key) => {
      this.set(key, val, true);
    });
    this._warnHeadSent("defaults");
    this._refresh();
  }

  getSourceData() {
    return cloneDeep(this._sources);
  }

  getHeadElements() {
    const elements = [];
    each(this._metadata, (value, key) => {
      const info = this.getElementInfo(key);
      if (info) {
        elements.push(info);
      }
    });
    this.headSent = true;
    return elements;
  }

  getElementInfo(key) {
    if (!key) {
      return null;
    }
    let value = this.get(key);
    if (!value) {
      return null;
    }
    if (key === "title") {
      value += this.get("titleSuffix") || "";
    }
    const elementType = elementUtils.getElementType(key);
    return elementUtils.getElementInfo(elementType, key, value);
  }

  _refresh() {
    this._metadata = {};
    each(this.sourceOrder, source => {
      each(this._sources[source], (value, key) => {
        if (isNil(this._metadata[key])) {
          this._metadata[key] = value;
        }
      });
    });
    this._updateSocialTags();
  }

  _setSourceOrder(sourceOrderOption) {
    if (sourceOrderOption) {
      sourceOrderOption = without(map(sourceOrderOption, toLower), "peeps", "presets");
      if (!includes(sourceOrderOption, "defaults")) {
        sourceOrderOption.push("defaults");
      }
    }

    this.sourceOrder = concat("peeps", sourceOrderOption || DEFAULT_SOURCE_ORDER, "presets");
  }

  _updateSocialTags() {
    if (this._metadata.canonical) {
      defaults(this._metadata, {
        "twitter:url": this._metadata.canonical,
        "og:url": this._metadata.canonical
      });
    }
    if (this._metadata.description && !this._metadata["twitter:description"]) {
      this._metadata["twitter:description"] = this._metadata.description;
    }
    if (this._metadata.title) {
      defaults(this._metadata, {
        "og:title": this._metadata.title,
        "twitter:title": this._metadata.title
      });
    }
  }

  _warnHeadSent(source) {
    if (this.headSent) {
      this._logger(["warn"], {
        msg: "Received seo metadata after head elements were rendered",
        source
      });
    }
  }
}

module.exports = PageMetadata;
