"use strict";

/* eslint-disable max-statements */

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _get = require("lodash/get");
var omit = require("lodash/omit");
var each = require("lodash/each");
var isString = require("lodash/isString");
var isObject = require("lodash/isObject");
var includes = require("lodash/includes");
var isFunction = require("lodash/isFunction");
var cloneDeep = require("lodash/cloneDeep");
var isNil = require("lodash/isNil");
var toLower = require("lodash/toLower");
var map = require("lodash/map");
var concat = require("lodash/concat");
var defaults = require("lodash/defaults");
var without = require("lodash/without");

var elementUtils = require("./page-element-utils");

var MAP_SERVICE_KEYS = {
  defaults: {
    pageTitle: "title",
    pageTitleSuffix: "titleSuffix"
  },
  peeps: {
    metaDesc: "description",
    metaTitle: "title",
    metaKW: "keywords",
    header: "genericHeader",
    noIndex: "robots"
  },
  preso: {
    noIndex: "robots"
  }
};

var PRESETS = {
  "og:type": "Website",
  "og:image": "http://sphotos-b.xx.fbcdn.net/hphotos-ash4/229244_10150189115584236_162217_n.jpg",
  "og:site_name": "Walmart.com",
  "fb:app_id": "105223049547814",
  "twitter:card": "summary",
  "twitter:image": "https://pbs.twimg.com/profile_images/616833885/walmart_logo_youtube_bigger.jpg",
  "twitter:site": "@walmart"
};

var DEFAULT_SOURCE_ORDER = ["iro", "preso", "defaults"];

var PageMetadata = function () {
  function PageMetadata(seoData, options) {
    var _this = this;

    _classCallCheck(this, PageMetadata);

    this._sources = { presets: PRESETS, defaults: {} };
    this._pending = {};
    this._setSourceOrder(_get(options, "sourceOrder"));
    this.headSent = false;
    this._logger = options && options.logger ? options.logger : function () {
      return undefined;
    };

    if (options && !options.hasOwnProperty("sourceOrder")) {
      options = omit(options, ["logger"]);
      // support earlier versions where defaults were passed as second param
      this.addSource("defaults", options, true);
    }

    each(seoData, function (data, source) {
      return _this.addSource(source, data, true);
    });

    this._refresh();
  }

  _createClass(PageMetadata, [{
    key: "addSource",
    value: function addSource(source, data, skipRefresh) {
      var _this2 = this;

      // eslint-disable-line max-statements
      if (!isString(source) || !isObject(data)) {
        if (!skipRefresh) {
          var msg = isString(source) ? "data for \"" + source + "\" - expected object, got " + (typeof data === "undefined" ? "undefined" : _typeof(data)) : "source name - expected string, got " + (typeof source === "undefined" ? "undefined" : _typeof(source));
          this._logger(["warn"], "addSource received invalid " + msg);
        }
        return false;
      }
      source = source.toLowerCase();

      if (!includes(this.sourceOrder, source)) {
        this._logger(["warn"], {
          msg: "Unrecognized seo metadata source cannot be added",
          knownSources: this.sourceOrder,
          source: source
        });
        return false;
      }

      if (isFunction(data.then)) {
        if (source === "peeps") {
          this._peepsPromise = data;
        }
        return data.then(function (resolvedData) {
          return _this2.addSource(source, resolvedData);
        }).catch(function (err) {
          _this2._logger(["warn"], { msg: "Page metadata source rejected", source: source, err: err });
        });
      }

      this._warnHeadSent(source);

      this._sources[source] = {};
      each(data, function (value, serviceKey) {
        var key = _get(MAP_SERVICE_KEYS, [source, serviceKey], serviceKey);

        if (serviceKey === "noIndex") {
          value = value ? "noindex" : "";
        }
        _this2._sources[source][key] = value;
      });

      if (!skipRefresh) {
        this._refresh();
      }
      return true;
    }
  }, {
    key: "onPeepsData",
    value: function onPeepsData() {
      return this._peepsPromise ? this._peepsPromise.reflect().return() : Promise.resolve();
    }
  }, {
    key: "get",
    value: function get(key) {
      return _get(this._metadata, key);
    }
  }, {
    key: "set",
    value: function set(key, value, skipRefresh) {
      this._sources.defaults[key] = value;
      if (!skipRefresh) {
        this._warnHeadSent("defaults");
        this._refresh();
      }
    }
  }, {
    key: "setDefaults",
    value: function setDefaults(def) {
      var _this3 = this;

      each(def, function (val, key) {
        _this3.set(key, val, true);
      });
      this._warnHeadSent("defaults");
      this._refresh();
    }
  }, {
    key: "getSourceData",
    value: function getSourceData() {
      return cloneDeep(this._sources);
    }
  }, {
    key: "getHeadElements",
    value: function getHeadElements() {
      var _this4 = this;

      var elements = [];
      each(this._metadata, function (value, key) {
        var info = _this4.getElementInfo(key);
        if (info) {
          elements.push(info);
        }
      });
      this.headSent = true;
      return elements;
    }
  }, {
    key: "getElementInfo",
    value: function getElementInfo(key) {
      if (!key) {
        return null;
      }
      var value = this.get(key);
      if (!value) {
        return null;
      }
      if (key === "title") {
        value += this.get("titleSuffix") || "";
      }
      var elementType = elementUtils.getElementType(key);
      return elementUtils.getElementInfo(elementType, key, value);
    }
  }, {
    key: "_refresh",
    value: function _refresh() {
      var _this5 = this;

      this._metadata = {};
      each(this.sourceOrder, function (source) {
        each(_this5._sources[source], function (value, key) {
          if (isNil(_this5._metadata[key])) {
            _this5._metadata[key] = value;
          }
        });
      });
      this._updateSocialTags();
    }
  }, {
    key: "_setSourceOrder",
    value: function _setSourceOrder(sourceOrderOption) {
      if (sourceOrderOption) {
        sourceOrderOption = without(map(sourceOrderOption, toLower), "peeps", "presets");
        if (!includes(sourceOrderOption, "defaults")) {
          sourceOrderOption.push("defaults");
        }
      }

      this.sourceOrder = concat("peeps", sourceOrderOption || DEFAULT_SOURCE_ORDER, "presets");
    }
  }, {
    key: "_updateSocialTags",
    value: function _updateSocialTags() {
      if (this._metadata.canonical) {
        defaults(this._metadata, {
          "twitter:url": this._metadata.canonical,
          "og:url": this._metadata.canonical
        });
      }
      if (this._metadata.description && !this._metadata["twitter:description"]) {
        this._metadata["twitter:description"] = this._metadata.description;
      }
      if (this._metadata.title) {
        defaults(this._metadata, {
          "og:title": this._metadata.title,
          "twitter:title": this._metadata.title
        });
      }
    }
  }, {
    key: "_warnHeadSent",
    value: function _warnHeadSent(source) {
      if (this.headSent) {
        this._logger(["warn"], {
          msg: "Received seo metadata after head elements were rendered",
          source: source
        });
      }
    }
  }], [{
    key: "getElementType",
    value: function getElementType(key) {
      return elementUtils.getElementType(key);
    }
  }]);

  return PageMetadata;
}();

module.exports = PageMetadata;
//# sourceMappingURL=page-metadata.js.map