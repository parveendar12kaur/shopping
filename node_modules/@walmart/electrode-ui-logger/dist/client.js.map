{"version":3,"sources":["../src/client.js"],"names":["stringify","require","Config","fetch","Log","_stream","setFetch","_fetch","_flush","length","payload","credentials","disableAnalytics","method","headers","Accept","body","fullApiPath","setLogInterval","_interval","_poll","clearInterval","setInterval","_addLogMessage","data","push","module","exports"],"mappings":"AAAA;AACA;;;;AAIA;;AAEA,IAAMA,YAAYC,QAAQ,qBAAR,CAAlB;AACA,IAAMC,SAASD,QAAQ,8BAAR,CAAf;AACA,IAAME,QAAQF,QAAQ,0BAAR,EAAoCE,KAAlD;AACA,IAAMC,MAAMH,QAAQ,UAAR,CAAZ;;AAEAG,IAAIC,OAAJ,GAAc,EAAd;AACAD,IAAID,KAAJ,GAAYA,KAAZ;;AAEAC,IAAIE,QAAJ,GAAe,UAASC,MAAT,EAAiB;AAC9BH,MAAID,KAAJ,GAAYI,MAAZ;AACD,CAFD;;AAIAH,IAAII,MAAJ,GAAa,YAAW;AACtB,MAAIJ,IAAIC,OAAJ,CAAYI,MAAZ,GAAqB,CAAzB,EAA4B;AAC1B,QAAMC,UAAU;AACdC,mBAAa,SADC;AAEdC,wBAAkB,IAFJ;AAGdC,cAAQ,MAHM;AAIdC,eAAS;AACPC,gBAAQ,kBADD;AAEP,wBAAgB;AAFT,OAJK;AAQdC,YAAMhB,UAAUI,IAAIC,OAAd;AARQ,KAAhB;;AAWAD,QAAIC,OAAJ,GAAc,EAAd;;AAEA,WAAOD,IAAID,KAAJ,CAAUD,OAAOe,WAAP,CAAmB,SAAnB,CAAV,EAAyCP,OAAzC,CAAP;AACD;AACF,CAjBD;;AAmBAN,IAAIc,cAAJ,GAAqB,UAASC,SAAT,EAAoB;AACvCf,MAAIe,SAAJ,GAAgBA,SAAhB;;AAEA,MAAIf,IAAIgB,KAAR,EAAe;AACbC,kBAAcjB,IAAIgB,KAAlB;AACD;;AAEDhB,MAAIgB,KAAJ,GAAYE,YAAYlB,IAAII,MAAhB,EAAwBJ,IAAIe,SAA5B,CAAZ;AACD,CARD;;AAUAf,IAAIc,cAAJ,CAAmB,KAAnB;;AAEAd,IAAImB,cAAJ,GAAqB,UAASC,IAAT,EAAe;AAClCpB,MAAIC,OAAJ,CAAYoB,IAAZ,CAAiBD,IAAjB;AACD,CAFD;;AAIAE,OAAOC,OAAP,GAAiBvB,GAAjB","file":"client.js","sourcesContent":["\"use strict\";\n/*\n * This file is intended to be executed by browsers only\n */\n\n/* eslint-disable consistent-return, no-magic-numbers */\n\nconst stringify = require(\"json-stringify-safe\");\nconst Config = require(\"@walmart/electrode-ui-config\");\nconst fetch = require(\"@walmart/electrode-fetch\").fetch;\nconst Log = require(\"./logger\");\n\nLog._stream = [];\nLog.fetch = fetch;\n\nLog.setFetch = function(_fetch) {\n  Log.fetch = _fetch;\n};\n\nLog._flush = function() {\n  if (Log._stream.length > 0) {\n    const payload = {\n      credentials: \"include\",\n      disableAnalytics: true,\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      body: stringify(Log._stream)\n    };\n\n    Log._stream = [];\n\n    return Log.fetch(Config.fullApiPath(\"/logger\"), payload);\n  }\n};\n\nLog.setLogInterval = function(_interval) {\n  Log._interval = _interval;\n\n  if (Log._poll) {\n    clearInterval(Log._poll);\n  }\n\n  Log._poll = setInterval(Log._flush, Log._interval);\n};\n\nLog.setLogInterval(10000);\n\nLog._addLogMessage = function(data) {\n  Log._stream.push(data);\n};\n\nmodule.exports = Log;\n"]}