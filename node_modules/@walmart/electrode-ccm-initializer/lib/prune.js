"use strict";

const Promise = require("bluebird");
const Fs = require("fs");
const Path = require("path");
const constants = require("./constants");
const readdir = Promise.promisify(Fs.readdir);
const stat = Promise.promisify(Fs.stat);
const unlink = Promise.promisify(Fs.unlink);
const fyi = require("@walmart/electrode-fyi");

const LIMIT_ERRORS = 1000;

const fyiError = fyi.limitError("electrode-ccm", LIMIT_ERRORS);

const HOURS_IN_DAY = 24;

function prune(dir, expiredTime) {
  expiredTime = expiredTime || HOURS_IN_DAY * constants.ONE_HOUR_MS;
  const now = Date.now();
  return readdir(dir)
    .each(fn => {
      const filename = Path.join(dir, fn);
      return stat(filename)
        .then(st => {
          const mtime = new Date(st.mtime).getTime();
          if (now - mtime >= expiredTime) {
            return unlink(filename).catch(err => {
              fyiError("electrode-ccm: unlink snapshot", filename, "failed:", err.message);
            });
          }
          return undefined;
        })
        .catch(err => {
          fyiError("electrode-ccm: stat snapshot", filename, "failed:", err.message);
        });
    })
    .catch(err => {
      fyiError("electrode-ccm: readdir snapshot", dir, "failed", err.message);
    });
}

function setupInterval(dir, intervalTime, expiredTime) {
  return setInterval(() => {
    prune(dir, expiredTime);
  }, intervalTime);
}

module.exports = {
  prune,
  setupInterval
};
