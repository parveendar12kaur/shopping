"use strict";

const _ = require("lodash");
const pkg = require("../package.json");
const ServiceInitializer = require("./service-initializer");

const READY_STATE = Symbol("server ready state");

const CLIENTS_NOT_READY = 0;
const CLIENTS_PENDING = 1;
const CLIENTS_READY = 2;

function initializer(server, options, next) {
  const config = _.get(server, "settings.app.config");
  const serviceInitializer = new ServiceInitializer({ config });

  return serviceInitializer
    .init()
    .then(() => {
      server.app.services = serviceInitializer.createContainer();
      server.app.services[READY_STATE] = CLIENTS_NOT_READY;
      _.defaults(config.services, { registryRefreshPath: "/electrode/services/discovery/refresh" });

      server.ext("onRequest", (req, reply) => {
        const isRefreshPath = () => req.path === config.services.registryRefreshPath;
        const isNotReady = () => server.app.services[READY_STATE] === CLIENTS_NOT_READY;
        const isReady = () => server.app.services[READY_STATE] === CLIENTS_READY;
        const setPending = () => (server.app.services[READY_STATE] = CLIENTS_PENDING);
        const setReady = () => (server.app.services[READY_STATE] = CLIENTS_READY);

        if (isRefreshPath()) {
          if (req.info.remoteAddress !== "127.0.0.1") {
            return reply("Services registry refresh only allowed from 127.0.0.1");
          }

          if (isNotReady()) {
            setPending();
          }

          req.app.services = server.app.services;

          return serviceInitializer
            .refreshServiceClients(req, req.query.force === "1")
            .then(() => {
              setReady();
              return reply({});
            })
            .catch(err => reply(err));
        } else if (!isReady()) {
          // 500 error so Akamai doesn't cache the response
          return reply("Server starting.").code(500); // eslint-disable-line
        }

        req.app.services = server.app.services;
        return reply.continue();
      });

      next();
    })
    .catch(next); // Hapi could throw! Propagate error back to callback
}

initializer.attributes = { pkg };

module.exports = initializer;
