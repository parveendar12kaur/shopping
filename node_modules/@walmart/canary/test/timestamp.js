/* eslint-disable func-names */
var test = require('tape');
var createCanary = require('..');

test('getTs defaults to timestamp', function (t) {
    t.plan(2);
    var now = Date.now();

    var canary = createCanary({ suspend: false });
    canary.event(function (evt) {
        t.equal(canary.getTs(evt), now);
        t.equal(evt.ts, now);
    });
    canary.process({ test: 1, timestamp: now });
});

test('getTs allows other prop names', function (t) {
    t.plan(2);
    var now = Date.now();

    var canary = createCanary({ suspend: false, timestamp: 'ts' });
    canary.event(function (evt) {
        t.equal(canary.getTs(evt), now);
        t.equal(evt.ts, now);
    });
    canary.process({ test: 1, timestamp: now + 1, ts: now });
});

test('getTs allows functional timestamp opt', function (t) {
    t.plan(2);
    var now = Date.now();

    var canary = createCanary({ suspend: false, timestamp: returnTS });
    canary.event(function (evt) {
        t.equal(canary.getTs(evt), now);
        t.equal(evt.ts, now);
    });
    canary.process({ test: 1, timestamp: now + 1, ts: now });

    function returnTS (evt) {
        return evt.payload.ts;
    }
});

test('getTs falls back to rts', function (t) {
    t.plan(2);

    var canary = createCanary({ suspend: false });
    canary.event(function (evt) {
        t.equal(canary.getTs(evt), evt.rts);
        t.equal(evt.ts, evt.rts);
    });
    canary.process({ test: 1 });
});

test('getTs returns null if input is garbage (prop)', function (t) {
    t.plan(1);

    var canary = createCanary({ suspend: false });
    canary.event(function (evt) {
        t.equal(canary.getTs(evt), null);
    });
    canary.event.produce(undefined);
});

test('getTs returns null if input is garbage (func)', function (t) {
    t.plan(1);

    var canary = createCanary({ suspend: false, timestamp: returnTS });
    canary.event(function (evt) {
        t.equal(canary.getTs(evt), null);
    });
    canary.event.produce(undefined);

    function returnTS (evt) {
        return evt.payload.ts;
    }
});
