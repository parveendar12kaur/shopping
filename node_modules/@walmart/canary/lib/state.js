var memoryStore = require('./memory-store');

module.exports = createState;

function createState () {
    var stores = [];
    var defaultStore;

    var state = Object.defineProperties({}, {
        set: { value: setter, writable: true },
        get: { value: getter, writable: true },
        remove: { value: remover, writable: true },
        configure: { value: configure },
        registerStore: { value: registerStore },
        unregisterStore: { value: unregisterStore },
        isStoreAvailable: { value: isStoreAvailable },
        setDefaultStore: { value: setDefaultStore },
        getDefaultStore: { value: getDefaultStore },
        // deprecated api
        setter: { value: setStateSetter },
        getter: { value: setStateGetter }
    });

    state.registerStore(memoryStore);
    setDefaultStore('memory');

    return state;

    function configure (config) {
        var args = Array.prototype.slice.call(arguments, 1);
        var configObj = typeof config === 'function'
            ? config.apply(undefined, args)
            : config;

        if (configObj && Array.isArray(configObj.stores)) {
            configObj.stores.forEach(registerStore);
        }
        if (configObj && configObj.defaultStore) {
            setDefaultStore(configObj.defaultStore);
        }
        return state;
    }

    function setDefaultStore (name) {
        if (!stores[name]) {
            throw new Error('unknown store: ' + name);
        }
        defaultStore = name;
        return this;
    }

    function getDefaultStore () {
        return defaultStore;
    }

    function registerStore (store) {
        var args = Array.prototype.slice.call(arguments, 1);
        var s = typeof store === 'function'
            ? store.apply(undefined, args)
            : store;
        stores[s.name] = s;
        return state;
    }

    function unregisterStore (name) {
        var exists = !!stores[name];
        if (exists) {
            delete stores[name];
        }
        return exists;
    }

    function isStoreAvailable (name) {
        return !!stores[name];
    }

    function setter (k, v, options) {
        var opts = options || {};
        var store = getStore(opts);

        var now = Date.now();
        var envelope = {
            v: v,
            ts: now,
            ex: opts.ttl === undefined ? undefined : now + opts.ttl
        };

        store.set(k, envelope, opts);
    }

    function getter (k, options) {
        var opts = options || {};
        var store = getStore(opts);

        var envelope = store.get(k, opts);
        var definedValue = typeof envelope !== 'undefined';
        var expiredValue = definedValue
            ? (envelope.ex && envelope.ex <= Date.now())
            : false;
        if (expiredValue) {
            store.remove(k);
        }

        return (definedValue && !expiredValue)
            ? envelope.v
            : undefined;
    }

    function remover (k, options) {
        var opts = options || {};
        var store = getStore(opts);

        store.remove(k, opts);
    }

    function getStore (options) {
        var name = options.in || defaultStore;
        if (!stores[name]) {
            throw new Error('unknown store: ' + name);
        }
        return stores[name];
    }

    // deprecated
    function setStateSetter (set) {
        if (typeof set !== 'function') {
            throw new TypeError('state setter must be a function with signature (k, v)');
        }
        state.set = set;
    }

    // deprecated
    function setStateGetter (get) {
        if (typeof get !== 'function') {
            throw new TypeError('state getter must be a function with signature (k)');
        }
        state.get = get;
    }
};
