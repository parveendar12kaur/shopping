/* eslint no-undef: 0 */
/* @flow */
import React from "react";
import PropTypes from "prop-types";
import {
  AnalyticsProvider,
  ExceptionCollector,
  CollectorContext
} from "@walmart/wmreact-analytics";
import makeCanary from "@walmart/canary";
import ExecutionEnvironment from "exenv";

/**
A base application component for Electrode applications.
@examples
```jsx
<ElectrodeApplication>
  <div>Your application.</div>
</ElectrodeApplication>
```
*/
export class ElectrodeApplication extends React.Component {
  constructor(props: Object): void {
    super(props);

    this.state = {
      canary: props.canary
    };

    this.state.canary.log(evt => {
      if (props.canaryLog) {
        props.canaryLog(evt);
      }
    });

    this.state.canary.message(message => {
      if (props.canaryMessage) {
        props.canaryMessage(message);
      }
    });

    if (props.canaryRules) {
      this.state.canary.applyRules(props.canaryRules);
    }

    this._onAnalyticsEvent = this._onAnalyticsEvent.bind(this);
  }

  componentDidMount() {
    if (ExecutionEnvironment.canUseDOM) {
      this._onAnalyticsEvent({ _type: "application-mounted" });
    }
  }

  _onAnalyticsEvent(event) {
    const { canary } = this.state;
    if (canary) {
      canary.process(event);
    }

    const { onAnalyticsEvent } = this.props;
    if (onAnalyticsEvent) {
      onAnalyticsEvent(event);
    }
  }

  render(): ReactElement {
    const appContext = {};
    if (ExecutionEnvironment.canUseDOM) {
      appContext.url = document.location.href;
    }
    return (
      <AnalyticsProvider onEvent={this._onAnalyticsEvent}>
        <CollectorContext {...appContext}>
          <ExceptionCollector>{this.props.children}</ExceptionCollector>
        </CollectorContext>
      </AnalyticsProvider>
    );
  }
}

ElectrodeApplication.defaultProps = {
  canary: makeCanary()
};

ElectrodeApplication.propTypes = {
  children: PropTypes.object,
  /**
  An optional canary object if you want to create it
  */
  canary: PropTypes.object,
  /**
  Rules to send to the canary engine for processing
  */
  canaryRules: PropTypes.array,
  /**
  Event handler for a canary log event
  */
  canaryLog: PropTypes.func,
  /**
  Event handler for a canary message event
  */
  canaryMessage: PropTypes.func,
  /**
  Any additional event processing
  */
  onAnalyticsEvent: PropTypes.func
};
