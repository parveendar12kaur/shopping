"use strict";

/* eslint-disable no-invalid-this, quotes, curly, max-len, no-magic-numbers, prefer-template, global-require */

/*
 * WalmartLabs SOA Enterprise System Bus (ESB) Proxy 1.0 doesn't honor HTTP spec and require all "WM_*"
 * header field names to be upper case.
 *
 * http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html
 *
 * This was their response:
 *
 *
 * > I understand that as per RFC 2616, headers are case insensitive, but, SOARI 1.0 and ESB expect headers to be in upper
 * > case. Unfortunately, thatâ€™s the behavior limitation in SOA 1.0. As we move towards SOA 2.0, we will be rectifying this.
 *
 *
 * But NodeJS core always process HTTP headers in lower case.
 *
 * So we have to monkey patch NodeJS core to _not_ change the "WM_*" headers.
 *
 *
 * At the time of writing this, NodeJS core source for 4.x from here:
 *
 * https://github.com/nodejs/node/blob/d3a40c51c5770b4def9a6033df0fa46c6f9f0cc7/lib/_http_outgoing.js
 * https://github.com/nodejs/node/blob/d3a40c51c5770b4def9a6033df0fa46c6f9f0cc7/lib/_http_incoming.js
 *
 * 6.x here:
 *
 * https://github.com/nodejs/node/blob/7fe441d4f2571ed0e658368e700e52a1aece09da/lib/_http_outgoing.js
 * https://github.com/nodejs/node/blob/7fe441d4f2571ed0e658368e700e52a1aece09da/lib/_http_incoming.js
 *
 */

const http = require("http");

const automaticHeaders = {
  connection: true,
  "content-length": true,
  "transfer-encoding": true,
  date: true
};

function patchHttpOutgoingSetHeader(name, value) {
  /* istanbul ignore next */
  if (typeof name !== "string")
    throw new TypeError("`name` should be a string in setHeader(name, value).");
  /* istanbul ignore next */
  if (value === undefined) throw new Error('`value` required in setHeader("' + name + '", value).');
  /* istanbul ignore next */
  if (this._header) throw new Error("Can't set headers after they are sent.");

  if (this._headers === null) this._headers = {};

  let key = name.toLowerCase();

  if (key === "signedheaders") {
    key = name = "SignedHeaders";
  } else if (key.startsWith("wm_")) {
    key = name = name.toUpperCase();
  }

  this._headers[key] = value;
  this._headerNames[key] = name;

  /* istanbul ignore next */
  if (automaticHeaders[key]) this._removedHeader[key] = false;
}

http.OutgoingMessage.prototype.setHeader = patchHttpOutgoingSetHeader;

function register(server, options, next) {
  next();
}

register.attributes = {
  pkg: require("../package.json")
};

module.exports = register;
