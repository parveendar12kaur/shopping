"use strict";

/*
 * Hapi Plugin to install server extension to automatically
 * report response metrics.
 */

const metrics = require("./metrics");
const base = require("./reporters/base");
const _ = require("lodash");
const EventloopLatency = require("./eventloop-latency");
const defaults = require("./defaults");
const { universalHapiPlugin } = require("@walmart/electrode-hapi-compat");

function Plugin16(server, options, next) {
  base.setServer(server);
  server.on("response", request => metrics.reportResponse(request));

  const reportingInterval = _.get(options, "reportingInterval", defaults.REPORTING_INTERVAL_MS);

  // istanbul ignore else
  if (Number.isFinite(reportingInterval) && reportingInterval > 0) {
    const el = new EventloopLatency(reportingInterval);
    const threshold = _.get(options, "threshold", defaults.BLOCKED_THRESHOLD_MS);

    el.startReporting(threshold);

    server.ext("onPostStop", (serverExt, nextExt) => {
      el.stopReporting();
      nextExt();
    });
  }

  next();
}

function Plugin17(server, options) {
  base.setServer(server);
  server.events.on("response", request => metrics.reportResponse(request));

  const reportingInterval = _.get(options, "reportingInterval", defaults.REPORTING_INTERVAL_MS);

  if (Number.isFinite(reportingInterval) && reportingInterval > 0) {
    const el = new EventloopLatency(reportingInterval);
    const threshold = _.get(options, "threshold", defaults.BLOCKED_THRESHOLD_MS);

    el.startReporting(threshold);

    server.ext("onPostStop", () => {
      el.stopReporting();
    });
  }
}

const pkg = require("../package.json");

const registers = {
  hapi17: Plugin17,
  hapi16: Plugin16
};
module.exports = universalHapiPlugin(registers, pkg);
