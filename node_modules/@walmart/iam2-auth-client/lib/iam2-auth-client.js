"use strict";

const ElectrodeSwapi = require("@walmart/electrode-swapi");
const Path = require("path");
const currentTime = require("./current-time");

class Iam2AuthClient extends ElectrodeSwapi {
  constructor(config, swagger, providerName) {
    super(config, swagger, providerName);
  }

  static create(config, specOverride, providerName) {
    return ElectrodeSwapi.create({Client: Iam2AuthClient, config, specOverride, providerName});
  }

  //
  // IAM needs an extra header "CurrentTime" added that gets signed also
  // https://confluence.walmart.com/display/PGPSSO/Signing+headers+for+S2S+authentication
  //
  wmHeaders(meta) {
    if (this.providerInfo.wm_headers === false) {
      return {};
    }
    const headers = super.wmHeaders(meta);
    headers.CurrentTime = currentTime();
    return headers;
  }

  static get specFilename() {
    return Path.join(__dirname, "../data/swagger.yaml");
  }

  static get providerName() {
    return "iam2Auth";
  }

  static get serviceName() {
    return "platform-iam-server";
  }

  static get serviceVersion() {
    return "1.0.0";
  }

  //
  // Service hosts are automatically discovered through service registry
  // But if registry is not available, then these provide some default config
  //
  // You don't need to provide this, but it means you may not be able to
  // connect to services if the registry is down.
  //
  static get serviceRegistry() {
    const registry = {
      //
      // default values to always apply if env missing any values.
      // will also override what's in the spec.
      //
      default: {
        ENDPOINT: {
          schemes: ["https", "http"],
          host: "qa.iam.platform.prod.walmart.com",
          basePath: "/platform-iam-server"
        },
        ESB_PROXY: {
          schemes: ["http"],
          host: "ultra-esb.qa.esb.platform.qa.walmart.com",
          basePath: "/service/platform-iam-server"
        }
      },
      // if env is missing or not found, then use these (default still applies)
      missing: {},
      // qa
      qa: {
        ENDPOINT: {
          host: "qa.iam.platform.prod.walmart.com"
        },
        ESB_PROXY: {
          host: "ultra-esb.qa.esb.platform.qa.walmart.com"
        }
      },
      //stg
      stg: {
        ENDPOINT: {
          host: "stg.iam.platform.prod.walmart.com"
        },
        ESB_PROXY: {
          host: "ultra-esb.stg0.esb.platform.glb.prod.walmart.com"
        }
      },
      // prod
      prod: {
        ENDPOINT: {
          host: "prod1.iam.platform.prod.walmart.com"
        },
        ESB_PROXY: {
          schemes: ["http"],
          host: "ultra-esb.prod-shared1.esb.platform.glb.prod.walmart.com"
        }
      }
    };

    registry.stg0 = registry.qa;

    return registry;
  }

  static get signHeadersList() {
    const wm = ElectrodeSwapi.WM_HEADERS;
    //
    // https://confluence.walmart.com/pages/viewpage.action?title=Signing+headers+for+S2S+authentication&spaceKey=PGPSSO
    //
    return [wm.consumerId, "CurrentTime"].sort();
  }
}

module.exports = Iam2AuthClient;
