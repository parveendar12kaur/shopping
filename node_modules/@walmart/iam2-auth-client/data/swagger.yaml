swagger: '2.0'
info:
  title: IAM 2.0 Auth API
  description: WalmartLabs IAM 2.0 Auth REST JSON API
  version: 1.0.0
host: qa.iam.platform.prod.walmart.com
schemes:
  - https
  - http
basePath: /platform-iam-server

consumes:
  - "application/json"

produces:
  - "application/json"

paths:
  /iam/authnService:
    post:
      operationId: authUser
      summary: 'Authentication Service'
      description: |
        Authentication Service
      parameters:
        - name: data
          in: body
          description: authentication payload data
          required: true
          schema:
            $ref: '#/definitions/AuthPayload'
      responses:
        '200':
          description: 'Auth Response'
          schema:
            type: object
            items:
              $ref: '#/definitions/AuthResponse'

  /iam/authnService/guest:
    post:
      operationId: authGuest
      summary: 'Guest Authentication Service'
      description: 'Guest Authentication Service'
      parameters:
        - name: data
          in: body
          description: guest auth payload data
          required: true
          schema:
            $ref: '#/definitions/GuestAuthPayload'
      responses:
        '200':
          description: 'Auth Response'
          schema:
            type: object
            items:
              $ref: '#/definitions/AuthResponse'

  /iam/admin/principal:
    post:
      operationId: createNewUser
      x-wm-sign-headers: true
      security:
        - WM_AuthToken: []
      summary: 'Admin - create new user'
      description: |
        Admin operation for creating a new user
      parameters:
        - name: data
          in: body
          description: create new user payload data
          required: true
          schema:
            $ref: '#/definitions/NewUserPayload'
      responses:
        '200':
          description: 'Auth Response'
          schema:
            type: object
            items:
              $ref: '#/definitions/AuthResponse'

  /iam/admin/changepassword/resetCode:
    post:
      operationId: generateResetCode
      x-wm-sign-headers: true
      summary: "Admin - generate reset code"
      description: |
        Generates a new reset code for the user
      parameters:
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/GenerateResetCodePayload'
      responses:
        '200':
          description: "success"
          schema:
            $ref: '#/definitions/GenerateResetCodeResponse'
    put:
      operationId: resetPasswordByUserUsingCode
      x-wm-sign-headers: true
      summary: "Admin - reset password using reset code"
      description: |
        Use the reset code from generateResetCode to reset the users password
      parameters:
        - name: data
          in: body
          required: true
          schema:
            $ref: "#/definitions/ResetPasswordPayload"
      responses:
        '200':
          description: "success"
          schema:
            $ref: '#/definitions/ResetPasswordPayload'

  /iam/admin/changeloginpassword:
    put:
      operationId: changePasswordByUser
      x-wm-sign-headers: true
      summary: "Admin - change password by user login"
      description: |
        Use the user login and old password update the user password
      parameters:
        - name: data
          in: body
          required: true
          schema:
            $ref: "#/definitions/ResetPasswordPayload"
      responses:
        '200':
          description: "success"
          schema:
            $ref: '#/definitions/ResetPasswordPayload'

  /iam/admin/role:
    get:
      operationId: getUserRoles
      x-wm-sign-headers: true
      summary: "Admin - get user roles by loginId and realmId"
      description: |
        Use the loginId and realmId to get the user roles
      parameters:
        - name: loginId
          in: query
          required: true
          type: string
        - name: realmId
          in: query
          required: true
          type: string
      responses:
        '200':
          description: 'Auth Response'
          schema:
            type: object
            items:
              $ref: '#/definitions/AuthResponse'

  /iam/authn/token:
    post:
      operationId: validateAuthToken
      summary: 'Validate an auth token'
      description: |
        Validate an auth token that is for calling protected IAM APIs
      parameters:
        - name: data
          in: body
          description: authentication token payload data
          required: true
          schema:
            $ref: '#/definitions/AuthTokenPayload'
      responses:
        '200':
          description: 'Auth Response'
          schema:
            type: object
            items:
              $ref: '#/definitions/AuthResponse'
    put:
      operationId: invalidateAuthToken
      summary: 'Invalidate an auth token'
      description: |
        Invalidate an auth token for calling protected IAM APIs
      parameters:
        - name: data
          in: body
          description: invalidate token payload data
          required: true
          schema:
            $ref: '#/definitions/InvalidateTokenPayload'
      responses:
        '200':
          description: 'Auth Response'
          schema:
            type: object
            items:
              $ref: '#/definitions/AuthResponse'

  /iam/authn/token/refresh:
    post:
      operationId: refreshAuthToken
      summary: 'Refresh an auth token'
      description: |
        Refresh an auth token that is for calling protected IAM APIs
      parameters:
        - name: data
          in: body
          description: refresh token payload data
          required: true
          schema:
            $ref: '#/definitions/AuthTokenPayload'
      responses:
        '200':
          description: 'Auth Response'
          schema:
            type: object
            items:
              $ref: '#/definitions/AuthResponse'

  /iam/vudu/linkWalmartAccount:
    post:
      operationId: linkWalmartAccount
      summary: 'Link Existing VUDU Account to Walmart'
      description: |
        Link Existing VUDU Account to Walmart
      parameters:
        - name: data
          in: body
          description: link account payload data
          required: true
          schema:
            $ref: '#/definitions/AuthTokenPayload'
      responses:
        '200':
          description: 'Auth Response'
          schema:
            type: object
            items:
              $ref: '#/definitions/AuthResponse'

  /iam/vudu/createShadowAccount:
    post:
      operationId: createShadowAccount
      summary: 'createShadowAccount'
      description: |
        createShadowAccount
      parameters:
        - name: data
          in: body
          description: createShadowAccount payload data
          required: true
          schema:
            $ref: '#/definitions/AuthTokenPayload'
      responses:
        '200':
          description: 'Auth Response'
          schema:
            type: object
            items:
              $ref: '#/definitions/AuthResponse'

  /iam/vudu/linkedAccount:
    post:
      operationId: checkAccountLink
      summary: 'checkAccountLink'
      description: |
        checkAccountLink
      parameters:
        - name: data
          in: body
          description: checkAccountLink payload data
          required: true
          schema:
            $ref: '#/definitions/AuthTokenPayload'
      responses:
        '200':
          description: 'Auth Response'
          schema:
            type: object
            items:
              $ref: '#/definitions/AuthResponse'

securityDefinitions:
  WM_AuthToken:
    name: 'WM_SEC.AUTH_TOKEN'
    type: apiKey
    in: header

definitions:
  AuthPayload:
    type: object
    required: [ "payload" ]
    properties:
      payload:
        type: object
        required: [ "userId", "password", "tenantId", "realmId" ]
        properties:
          userId:
            type: string
            description: 'user id'
          password:
            type: string
            description: 'password'
          tenantId:
            type: string
            description: 'tenant id'
          rememberMe:
            type: string
            description: 'rememberMe flag'
          realmId:
            type: string
            description: 'realm id'
          deviceFP:
            type: string
            description: 'device fingerprint'

  GuestAuthPayload:
    type: object
    required: [ "payload" ]
    properties:
      payload:
        type: object
        required: [ "realmId" ]
        properties:
          principalAuthnToken:
            type: string
            description: 'principal auth token'
          principalId:
            type: string
            description: 'principal auth id'
          realmId:
            type: string
            description: 'realm id'


  AuthResponse:
    type: object
    properties:
      status:
        type: string
        description: 'API call status'
      payload:
        type: object


  AuthTokenPayload:
    type: object
    required: [ "payload" ]
    properties:
      payload:
        type: string

  InvalidateTokenPayload:
    type: object
    required: [ "payload" ]
    properties:
      payload:
        type: object
        properties:
          token:
            type: string

  NewUserPayload:
    type: object
    required: [ "payload" ]
    properties:
      payload:
        type: object
        required: [ "email", "loginUID", "password", "realmId" ]
        properties:
          email:
            type: string
            description: "new user's email"
          enabled:
            type: boolean
          id:
            type: string
          locked:
            type: boolean
          loginUID:
            type: string
          password:
            type: string
          principalAuthnToken:
            type: string
          realmId:
            type: string

  GenerateResetCodePayload:
    type: object
    required: [ "payload" ]
    properties:
      payload:
        type: object
        required: ["loginId", "realmId"]
        properties:
          loginId:
            type: string
          realmId:
            type: string

  GenerateResetCodeResponse:
    type: object
    properties:
      payload:
        type: object
        properties:
          principalId:
            type: string
          loginId:
            type: string
          realmId:
            type: string
          emailId:
            type: string
          resetCode:
            type: string

  ResetPasswordPayload:
    type: object
    required: [ "payload" ]
    properties:
      payload:
        type: object
        required: ["loginId", "realmId"]
        properties:
          resetCode:
            type: string
          passwordToReset:
            type: string
          loginId:
            type: string
          realmId:
            type: string

  UpdatePasswordPayload:
    type: object
    required: [ "payload" ]
    properties:
      payload:
        type: object
        required: ["oldPassword", "newPassword", "realmId", "loginId", "changed" ]
        properties:
          oldPassword:
            type: string
          newPassword:
            type: string
          realmId:
            type: string
          loginId:
            type: string
          changed:
            type: boolean
