"use strict";

/* eslint-disable no-magic-numbers */

const _ = require("lodash");
const addURIEncoding = require("../utils/add-uri-encoding");
const makeRunScript = require("../utils/make-run-script");
const objectToProps = require("../utils/object-to-props");
const PageMetadata = require("@walmart/electrode-seo-metadata").PageMetadata;

module.exports = function(context) {
  const request = context.user.request;
  const routeOptions = context.user.routeOptions;

  // expect request.app.seoAsync has been awaited
  let seoTags = request.app.seoTags;
  let missingTags = "";

  if (!seoTags) {
    if (process.env.NODE_ENV !== "production") {
      missingTags = `<!--
${this.id} - no request.app.seoTags - was request.app.seoAsync awaited? -->
`;
    }
    seoTags = {};
  }

  const pageMetadata = (request.app.pageMetadata = new PageMetadata(
    {
      defaults: Object.assign(
        {
          title: routeOptions.pageTitle,
          titleSuffix: routeOptions.pageTitleSuffix
        },
        routeOptions.metaTags.seo
      ),
      peeps: seoTags.peeps,
      preso: seoTags.preso
    },
    routeOptions.metaTags.seoOptions
  ));

  const elements = pageMetadata.getHeadElements().map(x => {
    return x.value
      ? `<${x.el}${objectToProps(x.elProps)}>${x.value}</${x.el}>`
      : `<${x.el}${objectToProps(x.elProps)}/>`;
  });

  const dataSource = JSON.stringify(
    addURIEncoding(_.assign(pageMetadata.getSourceData(), seoTags))
  );
  const seoExeScript = makeRunScript("remove-uri-encoding", dataSource);

  const relm = request.app.relm ? `window._wml.relm=${JSON.stringify(request.app.relm)};` : "";

  const seoScript = `${missingTags}<script>window._wml.seoTags=${seoExeScript}${relm}</script>`;

  return `${elements.join("")}${seoScript}`;
};
