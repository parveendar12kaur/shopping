"use strict";

/* eslint-disable max-statements */

const fyi = require("@walmart/electrode-fyi");
const Cookies = require("@walmart/electrode-cookies");
const makeRunScript = require("../utils/make-run-script");

const URL_REGEX = /(https?:\/\/)/gi;
const URL_STUB = "ERROR_REMOVED_BY_DYNAMIC_DATA";

const torbitReplaceUrls = str => {
  return str.replace(URL_REGEX, URL_STUB);
};

const dynamicDataTags = {
  jwt: request => request.app.jwt,
  correlationId: request => request.app.correlationId,
  ccm: request => request.app.uiCCM || request.server.app.uiCCM,
  uiConfig: (request, routeOptions) => routeOptions.uiConfig,
  envInfo: (request, routeOptions) => routeOptions.envInfo,
  expoCookies: (request, routeOptions) => {
    const ep = routeOptions.expoPrefix;
    return ep ? Cookies.get(ep, { matchSubStr: true, request }) : {};
  }
};

module.exports = function(context) {
  const routeOptions = context.user.routeOptions;
  const request = context.user.request;

  if (!this.props.data) return "";

  const data = {};
  let empty = true;

  for (const dtag of this.props.data) {
    if (!dynamicDataTags.hasOwnProperty(dtag)) {
      fyi.error(`${this.id} - unknown data tag`, dtag);
    } else {
      empty = false;
      data[dtag] = dynamicDataTags[dtag](request, routeOptions);
    }
  }

  if (empty) return "";

  let str;

  try {
    str = JSON.stringify(data);
  } catch (err) {
    fyi.error(`${this.name} - ${err.message}`);
    str = `{"${this.name}": "${err.message}"}`;
  }

  // No PCI compliance required, return as JavaScript directly

  if (routeOptions.noPciCompliance) {
    return `<script>${makeRunScript("dynamic-data-resolver", str)}</script>`;
  }

  // Return as a JSON type with id tb-djs-wml-data so it can be processed later
  str = torbitReplaceUrls(str);

  return `<script id="tb-djs-wml-data" type="application/json">${str}</script>`;
};
