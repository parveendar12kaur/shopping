"use strict";

/* eslint-disable max-params */

const Path = require("path");
const ossHapiPlugin = require("electrode-react-webapp/lib/hapi/index17");
const getCdnScripts = require("../utils/get-cdn-scripts");
const defaultOptions = require("./default-options");
const Promise = require("bluebird");
const _ = require("lodash");
const errorPage = require("@walmart/electrode-error-page");

const { getCriticalCSS } = require("electrode-react-webapp/lib/utils");

const {
  loadStats,
  loadCdnAssets,
  parseAssets,
  getPwaManifest
  // getDevBundle
} = require("../utils");

const indexPagePlugin = (server, options) => {
  const myOptions = _.merge(
    {},
    {
      tokenHandlers: [Path.join(__dirname, "../wml-token-handlers")],
      htmlFile: Path.join(__dirname, "../index.html")
    },
    defaultOptions(process.env),
    options
  );

  // provide a default main chunk for dev mode where webpack
  // doesn't spit out stats to disk
  // TODO: find a way to pass access to webpack dev memfs
  const defaultMainStats = {
    assetsByChunkName: {
      main: [".js", ".css"] // default to look for files end in .js or .css
    }
  };

  const defaultEmptyStats = { assetsByChunkName: {} };

  return Promise.join(
    Promise.try(() => loadStats(myOptions.stats, defaultMainStats)),
    Promise.try(() => loadStats(myOptions.statsDll, defaultEmptyStats)),
    Promise.try(() => loadCdnAssets(myOptions)),
    Promise.try(() => getCriticalCSS(myOptions.criticalCSS)),
    (stats, statsDll, cdnAssets, criticalCSS) => {
      myOptions.__internals = {
        pwaManifest: getPwaManifest(stats.assets),
        assets: parseAssets(stats, cdnAssets),
        assetsDll: parseAssets(statsDll, cdnAssets),
        cdnAssets, // original CDN assets as loaded
        criticalCSS
      };

      const uiConfig = server.settings.app.config.ui || {};
      // const basePath = uiConfig.basePath || "/";
      myOptions.uiConfig = uiConfig;

      myOptions.unbundledJS.enterHead = getCdnScripts(myOptions).concat(
        myOptions.unbundledJS.enterHead
      );

      // myOptions.replaceTokenHandlers = true;

      _.defaults(myOptions, {
        responseForError: errorPage.staticResponse,
        responseForBadStatus: errorPage.staticResponse
      });

      ossHapiPlugin.register(server, myOptions);

      return;
    }
  );
};

module.exports = indexPagePlugin;
