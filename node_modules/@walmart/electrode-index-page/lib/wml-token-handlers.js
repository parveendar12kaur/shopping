"use strict";

/* eslint-disable no-unused-vars, max-statements, max-len, complexity */

const _ = require("lodash");
const HttpStatusCodes = require("http-status-codes");
const objectToProps = require("./utils/object-to-props");

const {
  getCriticalCSS,
  getIconStats,
  processRenderSsMode,
  getCspNonce,
  resolveChunkSelector
} = require("electrode-react-webapp/lib/utils");

const { getDevBundle } = require("./utils");

const { transformOutput } = require("electrode-react-webapp/lib/react/content");

const WML_MOBILE_META = require("./handlers/mobile-meta");
const WML_DNS_PREFETCH = require("./handlers/dns-prefetch");
const WML_PRECONNECT = require("./handlers/preconnect");
const WML_META_TAGS = require("./handlers/meta-tags");
const WML_DYNAMIC_DATA = require("./handlers/dynamic-data");
const WML_INIT_SCRIPTS = require("./handlers/init-scripts");
const unbundledScripts = require("./handlers/unbundled-scripts");
const WML_FIRST_SCRIPTS = unbundledScripts("firstScripts");
const WML_PREBUNDLE_SCRIPTS = unbundledScripts("preBundle");
const WML_POST_BUNDLE_SCRIPTS = unbundledScripts("postBundle");
const WML_CONTENT_DATA_TB_DYN = require("./handlers/content-data-tb-dyn");
const WML_AWAIT_ASYNC_DATA = require("./handlers/await-async-data");
const WML_SEO_META_DATA = require("./handlers/seo-meta-data");
const WML_DEFAULT_CDN_HOST = "i5.walmartimages.com";
const WML_SSR_START_RENDER = require("./handlers/ssr-start-render");
const WML_SPLIT_CSS = require("./handlers/split-css");
const WEBAPP_BODY_BUNDLES = require("./handlers/body-bundles");
const WEBAPP_HEADER_BUNDLES = require("./handlers/header-bundles");

module.exports = function setup(handlerContext) {
  const routeOptions = handlerContext.routeOptions;

  const WEBPACK_DEV = routeOptions.webpackDev;
  const RENDER_JS = routeOptions.renderJS;
  const RENDER_SS = routeOptions.serverSideRendering;
  // __internals initialized by Hapi plugin from lib/hapi/index.js
  const assets = routeOptions.__internals.assets;
  const prodBundleBase = routeOptions.prodBundleBase;
  const chunkSelector = resolveChunkSelector(routeOptions);
  const iconStats = getIconStats(routeOptions.iconStats);
  const criticalCSS = getCriticalCSS(routeOptions.criticalCSS);
  const bundleProps = Object.assign({}, routeOptions.bundleProps);
  if (routeOptions.asyncEnabled) bundleProps.async = "";
  if (routeOptions.deferEnabled) bundleProps.defer = "";
  const bodyBundleProps = objectToProps(bundleProps);

  const routeData = {
    WEBPACK_DEV,
    RENDER_JS,
    RENDER_SS,
    assets,
    prodBundleBase,
    chunkSelector,
    iconStats,
    criticalCSS,
    bodyBundleProps
  };

  handlerContext.routeData = routeData;

  const INITIALIZE = function(context) {
    const options = context.options;
    const request = options.request;
    const renderSs = processRenderSsMode(request, RENDER_SS, options.mode);

    const { js, css } = chunkSelector(request);

    // development asset bundles
    let devCSSBundle;
    let devJSBundle;

    if (WEBPACK_DEV) {
      devCSSBundle = getDevBundle(routeOptions, css, routeOptions.devServer.cssBundleName);
      devJSBundle = getDevBundle(routeOptions, js, routeOptions.devServer.jsBundleName);
    }

    // production asset bundles
    const jsAsset = _.get(assets, js, {});
    const cssAsset = _.get(assets, css, {});

    const { scriptNonce, styleNonce } = getCspNonce(request, routeOptions.cspNonceValue);

    const renderJs = RENDER_JS && options.mode !== "nojs";

    context.setOutputTransform(transformOutput);

    context.user = {
      request: options.request,
      response: {
        headers: {},
        state: {}
      },
      routeOptions,
      routeData,
      renderJs,
      renderSs,
      scriptNonce,
      styleNonce,
      jsChunk: js,
      cssChunk: css,
      devCSSBundle,
      devJSBundle,
      jsBundle: jsAsset.js,
      cssBundle: cssAsset.css
    };

    return "";
  };

  const tokens = {
    INITIALIZE,
    WML_DNS_PREFETCH,
    WML_PRECONNECT,
    WML_META_TAGS,
    WML_MOBILE_META,
    WML_FIRST_SCRIPTS,
    WML_DYNAMIC_DATA,
    WML_INIT_SCRIPTS,
    WML_PREBUNDLE_SCRIPTS,
    WML_SPLIT_CSS,
    WML_SSR_PREP: null,
    WML_SSR_START_RENDER,
    WML_DLL_BUNDLES: context => "",
    WML_POST_BUNDLE_SCRIPTS,
    WML_CONTENT_DATA_TB_DYN,
    WML_AWAIT_ASYNC_DATA,
    WML_SEO_META_DATA,
    WML_DEFAULT_CDN_HOST,
    WML_BOGEL_FONT_URL: `//${WML_DEFAULT_CDN_HOST}/dfw/63fd9f59-6ace/57132652-ed71-42ee-9bc8-c256b0073184/v1/BogleWeb.css`,
    WML_TORBIT_FLUSH: null, // `<meta name="tbflush"/>`,
    PWA_MANIFEST: routeOptions.__internals.pwaManifest
      ? `<link rel="manifest" href="${routeOptions.__internals.pwaManifest}" />`
      : null,
    // replace OSS token for header bundles
    WEBAPP_HEADER_BUNDLES,
    // replace OSS token for body bundles
    WEBAPP_BODY_BUNDLES
  };

  return {
    name: "wml-token-handlers",
    tokens
  };
};
