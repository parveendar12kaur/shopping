"use strict";

const { findManShelfValueWhitelist } = require("../utils");
const Cookies = require("@walmart/electrode-cookies");

const MILLI_SECONDS = 1000;

module.exports = function setup(handlerContext) {
  const {
    ccmPathToCacheTTLValue,
    ccmPathToCookieListDisablements,
    ccmPathToManualShelfTTLWhitelist
  } = handlerContext.routeOptions;

  function checkEnableTTLCache(request) {
    // disable caching if any disablements are listed from CCM
    const cookieListDisablements = request.app.ccm(ccmPathToCookieListDisablements);
    if (cookieListDisablements) {
      const split = cookieListDisablements.split(",");
      for (const cookieName of split) {
        const cookieValue = Cookies.get(cookieName.trim(), { request });
        if (cookieValue) return false;
      }
    }

    return true;
  }

  function getCustomMaxAge(request) {
    // modify ttl caching times based on specified manual shelf pages from ccm whitelist
    const manualShelfTTLWhiteList = request.app.ccm(ccmPathToManualShelfTTLWhitelist);
    if (manualShelfTTLWhiteList) {
      const split = manualShelfTTLWhiteList.split(",");
      const x = findManShelfValueWhitelist(split, request.url.path);
      if (x) return x;
    }
    return undefined;
  }

  return {
    process: function(context) {
      const request = context.user.request;

      const customMaxAge = getCustomMaxAge(request);
      const enableTTLCache = checkEnableTTLCache(request);

      // determine whether or not to enable TTL caching based on CCM values
      const ttlValueMsec = request.app.ccm(ccmPathToCacheTTLValue);
      const maxAgeToggle = (ttlValueMsec && ttlValueMsec !== "0") || customMaxAge;

      if (maxAgeToggle && enableTTLCache) {
        const parsedValue = customMaxAge || parseInt(ttlValueMsec);
        const ttl = isNaN(parsedValue) ? 0 : parsedValue;
        const maxAge = Math.floor(ttl / MILLI_SECONDS);
        const now = new Date();
        const expires = new Date(Date.now() + ttl);

        Object.assign(context.user.response.headers, {
          "cache-control": `max-age=${maxAge}, must-revalidate, public`,
          expires: expires.toString(),
          "last-modified": now.toString(),
          "content-type": "text/html"
        });
      } else {
        context.user.response.headers["content-type"] = "text/html";
      }

      return undefined;
    }
  };
};
