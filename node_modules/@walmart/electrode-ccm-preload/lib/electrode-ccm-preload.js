"use strict";

/* eslint-disable no-magic-numbers */

const Path = require("path");
const assert = require("assert");
const _ = require("lodash");
const ServiceInitializer = require("@walmart/electrode-service-initializer/lib/service-initializer"); // eslint-disable-line
const appPkg = require(Path.resolve("package.json"));
const Promise = require("bluebird");
const fyi = require("@walmart/electrode-fyi");
const convertValue = require("./convert-value");

class ElectrodeCCMPreload {
  constructor() {
    this._ccmPartial = {};
  }

  load(options) {
    assert(options.config, "electrode-ccm-preload: must pass config in options");

    this._appConfig = options.config;

    const scopeTemplate = options.scopeTemplate;
    const serviceName = options.serviceName || appPkg.name;
    const configName = options.configName || "electrode-app-config";

    assert(serviceName, "electrode-ccm-preload: no CCM serviceName was provided");

    return Promise.try(() => options.ccmClient || this.initCCMClient(options)).then(ccmClient => {
      const scopeName = ccmClient.scopeName(scopeTemplate, options.scopeContext);
      const basicReq = { log: _.noop, app: { config: this._config, disableTransactions: true } };

      const params = { serviceName, configName, scopeName, scopeTemplate };

      return ccmClient
        .withMeta(basicReq)
        .getConfig(params)
        .catch(err => {
          let errObj;

          const errors = _.get(err, "obj.errors");
          if (errors) {
            errObj = new Error(errors.map(x => x.info).join("\n"));
          } else if (err.errObj) {
            errObj = err.errObj;
            delete errObj.response;
          } else {
            throw err;
          }

          errObj.result = _.omit(err, ["errObj", "response"]);
          errObj.status = errObj.result.status;
          throw errObj;
        })
        .then(resp => {
          this._updateProps = this.process(resp);
          this._applyUpdates(
            `serviceName: ${serviceName} configName: ${configName} scopeName: ${scopeName}`,
            this._updateProps
          );
        })
        .then(() => {
          _.merge(this._appConfig, this._ccmPartial);
          return {
            config: this._appConfig,
            ccmPartial: this._ccmPartial,
            updateProps: this._updateProps
          };
        });
    });
  }

  initCCMClient(options) {
    const appConfig = options.config;
    const ccmClient = options.ccmClientPackageName || "@walmart/electrode-ccm-client";

    const config = (this._config = {
      services: {
        privateKey: {},
        providers: {
          [ccmClient]: _.get(appConfig, ["services", "providers", ccmClient], { options: {} })
        }
      }
    });

    _.merge(config.services, _.omit(appConfig.services, "providers"), { autoInitBeQuiet: true });

    const basicReq = { log: _.noop, app: { config } };

    const svcInitializer = new ServiceInitializer({ config: this._config });
    return svcInitializer
      .init()
      .then(() => svcInitializer.refreshServiceClients(basicReq))
      .then(() => {
        const services = svcInitializer.createContainer();
        return (this._ccmClient = services.ccm);
      });
  }

  process(resp) {
    this._ccmPartial = {};

    const updateGroup = k => {
      if (k.startsWith("$")) return "json";
      if (k.startsWith("-")) return "del";
      return "set";
    };

    return _.transform(
      _.get(resp, "obj.payload.configuration.properties", {}),
      (result, value, key) => {
        const group = updateGroup(key);
        result[group][key] = value;
        result.count++;
        return result;
      },
      {
        del: {},
        set: {},
        json: {},
        count: 0
      }
    );
  }

  _applyUpdates(infoMsg, props) {
    if (props.count > 0) {
      fyi.info(`CCM Preload: Updating - ${infoMsg}`);
      _.each(props.del, (value, key) => this._removeJSONPath(value, key));
      _.each(props.set, (value, key) => this._mergeJSONPath(value, key));
      _.each(props.json, (value, key) => this._mergeJSONString(value, key));
    } else {
      fyi.info(`CCM Preload: No properties found - ${infoMsg}`);
    }
  }

  _mergeJSONString(value, key) {
    try {
      const m = value.match(/^(['"`])(.*)\1$/);
      const deString = (m && m[2]) || value;
      const partial = JSON.parse(deString);
      _.merge(this._ccmPartial, partial);
      fyi.info(`CCM Preload JSON: ${value}  key: "${key}"`);
    } catch (err) {
      fyi.error(`electrode-ccm-preload merging JSON string from key "${key}" failed`, err.message);
      throw err;
    }
  }

  _mergeJSONPath(value, key) {
    const jsonPath = key.split(",");
    value = convertValue(value);
    _.set(this._ccmPartial, jsonPath, value);
    fyi.info(`CCM Preload set: ${jsonPath}  value: ${JSON.stringify(value)}`);
  }

  _removeJSONPath(value, key) {
    const jsonPath = value.split(",");
    fyi.info(`CCM Preload delete: ${jsonPath}  key: "${key}"`);
    _.unset(this._appConfig, jsonPath);
  }
}

module.exports = ElectrodeCCMPreload;
