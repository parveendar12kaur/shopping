"use strict";

/* eslint-disable no-magic-numbers, max-statements */

const assert = require("assert");
const defaultsDeep = require("lodash/defaultsDeep");
const uiConfig = require("../dist/ui-config");
const fyi = require("@walmart/electrode-fyi");
const getRequest = require("./get-request");

require("@walmart/electrode-npm-singleton")(`${__dirname}/..`);

const serverNotSetup = x => {
  const msg = `You are using ui-config.${x} before it gets reference to your app config.
Please see https://gecgithub01.walmart.com/electrode/electrode-ui-config#setup.`;
  const err = new Error(msg);
  fyi.error(err.stack);
  throw err;
};

const empty = Symbol("empty");

//
// Initial place holders for server side before _server is configured
// We need the server to get the application config since this module
// cannot make assumption about the app's static config setup.
//
const getInitialConfig = () => {
  return {
    server: {
      [empty]: true,
      app: {
        ccm: {}
      }
    },
    ui: null,
    ccm: null,
    getCcm: () => serverNotSetup("getCcm"),
    expoCookies: null,
    fullPath: () => serverNotSetup("fullPath"),
    fullApiPath: () => serverNotSetup("fullApiPath")
  };
};

//
// Properly initialize the ui config when a server is available.
//
const setupConfigWithServer = (server, config) => {
  assert(server, "must provide server when setup server side ui-config");
  if (!config.server[empty]) {
    fyi.error("ui-config._server is already set");
  }

  config.server = server;

  if (!server.app) {
    server.app = { ccm: {} };
  } else if (!server.app.ccm) {
    server.app.ccm = {};
  }

  const appConfig = (server.app && server.app.config) || {};
  const mergedConfig = defaultsDeep({}, appConfig.ssrUi, appConfig.ui);

  //
  // getCcm for server side.  Need request from opts or CLS
  //
  const getCcm = req => {
    return (req.app && req.app.ccm && req.app.ccm._store) || config.server.app.ccm;
  };

  if (!config.ccm) {
    //
    // support the ccm get field, which always fallback to server.app.ccm if CLS
    // is not available.
    //
    Object.defineProperty(config, "ccm", {
      get: () => {
        return getCcm(getRequest(null, "ccm"));
      }
    });
  }

  //
  // Update getCcm API with a version that looks up from request
  // on the server side.
  //
  const genConfig = uiConfig({ ui: mergedConfig });
  delete genConfig.ccm;
  Object.assign(config, genConfig, {
    getCcm: x => getCcm(getRequest(x, "getCcm"))
  });

  Object.seal(config); // prevents further changes to the config object
};

//
// Setup an inital config object that allows app to setup the _server in order
// to initialize the real ui-config object
//
module.exports = () => {
  const config = getInitialConfig();

  //
  // Hook to trigger when _server is set in order to properly
  // initialize all APIs for ui-config
  //
  Object.defineProperty(config, "_server", {
    set: server => setupConfigWithServer(server, config)
  });

  return config;
};
