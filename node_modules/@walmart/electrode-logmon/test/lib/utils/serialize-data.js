"use strict";

const rewire = require("rewire");

const serializeData = rewire("../../../lib/utils/serialize-data");

const expect = require("chai").expect;

describe("utils - serializeData", () => {

  const internals = serializeData.__get__("internals");

  it("should serialize the payload", (done) => {
    const payload = {
      quux: null,
      "app.msg": "Lorem=ipsum,dolor\tsit\namet",
      foo: "bar",
      baz: 123
    };
    expect(internals.serializePayload(payload)).to.equal(
      "app.msg=Lorem//=ipsum//,dolor\\tsit\\namet,baz=123,foo=bar,quux=null");
    done();
  });

  it("should serialize empty data and generate epoch and timestamp", (done) => {
    const serialized = serializeData({});
    expect(serialized).to.be.a("string");
    const columns = serialized.split("\t");
    expect(columns).to.have.length(21);
    expect(columns[0]).to.be.an.empty("string");
    expect(columns[1]).to.match(/^\d{10,}$/);
    expect(columns[2]).to.match(/^\d{4}-\d\d-\d\d\ \d\d:\d\d:\d\d\.\d{3}$/);
    done();
  });

  it("should serialize data with given timestamp", (done) => {
    const data = {
      epoch: Date.now(),
      timestamp: "2014-10-15 04:05:31.346"
    };
    const serialized = serializeData(data);
    expect(serialized).to.exist;
    const columns = serialized.split("\t");
    expect(columns).to.have.length(21);
    expect(columns[1]).to.equal(data.epoch.toString());
    expect(columns[2]).to.equal(data.timestamp);
    done();
  });
});
