"use strict";

const rewire = require("rewire");
const expect = require("chai").expect;

const getTxId = rewire("../../../lib/utils/get-tx-id");

describe("utils - getTxId", () => {

  const internals = getTxId.__get__("internals");

  it("should format a HEX string", () => {
    expect(internals.toHex(12345, 6)).to.equal("003039");
  });

  describe("getTxIdAsync", () => {

    it("should return a TxId from defaults", function (done) {
      getTxId.async(function (error, txId) {
        expect(error).to.not.exist;
        expect(txId).to.match(/[0-9a-f]{8}-[0-9a-f]{3}-[0-9a-f]{14}/);
        done();
      });
    });

    it("should return a TxId from given options", function (done) {
      const options = {
        threadId: 2919,
        timestamp: 1412963899405,
        sequence: 1902
      };

      getTxId.async(options, (error, txId) => {
        expect(error).to.be.null;
        expect(txId).to.match(/[0-9a-f]{8}-b67-148fb36180d76e/);
        done();
      });
    });

    it("should throw an error when calling getTxId without a callback function", function (done) {
      expect(function () {
        getTxId.async();
      }).to.throw(/callback function must be provided/);
      done();
    });
  });

  describe("getTxIdSync", () => {

    it("should return a TxId synchronously from given options", function () {
      const options = {
        clientId: 0x778899AA,
        threadId: 2919,
        timestamp: 1412963899405,
        sequence: 1902
      };
      expect(getTxId.sync(options)).to.equal("778899aa-b67-148fb36180d76e");
    });

    it("should support values of max safe integer", () => {
      const options = {
        clientId: Number.MAX_SAFE_INTEGER,
        threadId: Number.MAX_SAFE_INTEGER,
        timestamp: Number.MAX_SAFE_INTEGER,
        sequence: Number.MAX_SAFE_INTEGER
      };

      expect(getTxId.sync(options)).to.equal("ffffffff-fff-ffffffffffffff");
    });

    it("should support values of 0", () => {
      const options = {
        clientId: 0,
        threadId: 0,
        timestamp: 0,
        sequence: 0
      };

      expect(getTxId.sync(options)).to.equal("00000000-000-00000000000000");
    });

    it("should return a valid TxId for overflow numbers", (done) => {
      const options = {
        clientId: Number.MAX_SAFE_INTEGER,
        sequence: Number.MAX_SAFE_INTEGER,
        threadId: Number.MAX_SAFE_INTEGER,
        timestamp: Number.MAX_SAFE_INTEGER
      };
      expect(getTxId.sync(options)).to.equal("ffffffff-fff-ffffffffffffff");
      done();
    });

    it("should throw an exception for missing options", (done) => {
      expect(() => {
        getTxId.sync();
      }).to.throw(/options object is required/);
      done();
    });

    it("should throw an exception for missing clientId", (done) => {
      expect(() => {
        getTxId.sync({});
      }).to.throw(/clientId is required/);
      done();
    });

    it("should throw an exception for non-integer clientId", (done) => {
      const options = {
        clientId: "clientId"
      };
      expect(() => {
        getTxId.sync(options);
      }).to.throw(/clientId must be an integer less than or equal to/);
      done();
    });

    it("should throw an exception for clientId higher than Number.MAX_SAFE_INTEGER", (done) => {
      const options = {
        clientId: Number.MAX_SAFE_INTEGER + 1
      };
      expect(() => {
        getTxId.sync(options);
      }).to.throw(/clientId must be an integer less than or equal to/);
      done();
    });

    it("should throw an exception for clientId lower than 0", (done) => {
      const options = {
        clientId: -1
      };
      expect(() => {
        getTxId.sync(options);
      }).to.throw(/clientId must be greater than or equal to/);
      done();
    });

    it("should throw an exception for sequence higher than Number.MAX_SAFE_INTEGER", (done) => {
      const options = {
        clientId: 34,
        sequence: Number.MAX_SAFE_INTEGER + 1
      };
      expect(() => {
        getTxId.sync(options);
      }).to.throw(/sequence must be an integer less than or equal to/);
      done();
    });

    it("should throw an exception for sequence lower than 0", (done) => {
      const options = {
        clientId: 34,
        sequence: -1
      };
      expect(() => {
        getTxId.sync(options);
      }).to.throw(/sequence must be greater than or equal to/);
      done();
    });

    it("should throw an exception for threadId higher than Number.MAX_SAFE_INTEGER", (done) => {
      const options = {
        clientId: 34,
        threadId: Number.MAX_SAFE_INTEGER + 1
      };
      expect(() => {
        getTxId.sync(options);
      }).to.throw(/threadId must be an integer less than or equal to/);
      done();
    });

    it("should throw an exception for threadId lower than 0", (done) => {
      const options = {
        clientId: 34,
        threadId: -1
      };
      expect(() => {
        getTxId.sync(options);
      }).to.throw(/threadId must be greater than or equal to/);
      done();
    });

    it("should throw an exception for timestamp higher than Number.MAX_SAFE_INTEGER", (done) => {
      const options = {
        clientId: 34,
        timestamp: Number.MAX_SAFE_INTEGER + 1
      };
      expect(() => {
        getTxId.sync(options);
      }).to.throw(/timestamp must be an integer less than or equal to/);
      done();
    });

    it("should throw an exception for timestamp lower than 0", (done) => {
      const options = {
        clientId: 34,
        timestamp: -1
      };
      expect(() => {
        getTxId.sync(options);
      }).to.throw(/timestamp must be greater than or equal to/);
      done();
    });
  });
});
