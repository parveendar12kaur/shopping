"use strict";

const sinon = require("sinon");
const expect = require("chai").expect;

const DualWriter = require("../../lib/dual-writer");
const FileWriter = require("../../lib/file-writer");
const KafkaWriter = require("../../lib/kafka-writer");

describe("dualWriter", () => {

  const MESSAGE = "Lorem ipsum dolor sit amet, consectetur adipiscing elit.";
  const sandbox = sinon.sandbox.create();

  afterEach(() => {
    sandbox.restore();
  });

  describe("instantiation", () => {

    it("should use default mode if none is given", () => {
      const dw = new DualWriter({ filePath: "/dev/null" });
      expect(dw).to.have.deep.property("_options.mode", 3);
      expect(dw).to.have.property("_fileWriter");
      expect(dw).to.have.property("_kafkaWriter");
    });

    it("should create only file writer if mode is 1", () => {
      const dw = new DualWriter({ mode: 1, filePath: "/dev/null" });
      expect(dw).to.have.deep.property("_options.mode", 1);
      expect(dw).to.have.property("_fileWriter");
      expect(dw).to.not.have.property("_kafkaWriter");
    });

    it("should only create kafka writer if mode is 2", () => {
      const dw = new DualWriter({ mode: 2, filePath: "/dev/null" });
      expect(dw).to.have.deep.property("_options.mode", 2);
      expect(dw).to.have.property("_kafkaWriter");
      expect(dw).to.not.have.property("_fileWriter");
    });

    it("should not require filePath if mode is 2 (kafka-only)", () => {
      const dw = new DualWriter({ mode: 2 });
      expect(dw).to.have.deep.property("_options.mode", 2);
      expect(dw).to.have.property("_kafkaWriter");
      expect(dw).to.not.have.property("_fileWriter");
    });

    it("should throw error if mode is not an integer", () => {
      expect(function () {
        new DualWriter({ mode: "b" }); // eslint-disable-line no-new
      }).to.throw(/mode must be an integer/);
    });

    it("should throw error if mode is less than 1", () => {
      expect(function () {
        new DualWriter({ mode: 0 }); // eslint-disable-line no-new
      }).to.throw(/mode must be an integer between 1 and 3/);
    });

    it("should throw error if mode is greater than 3", () => {
      expect(function () {
        new DualWriter({ mode: 8 }); // eslint-disable-line no-new
      }).to.throw("mode must be an integer between 1 and 3");
    });

    it("should throw error if filePath is missing and mode is 3", () => {
      expect(function () {
        new DualWriter(); // eslint-disable-line no-new
      }).to.throw(/filePath is required/);
    });

    it("should throw error if filePath is missing and mode is 1", () => {
      expect(function () {
        new DualWriter({ mode: 1 }); // eslint-disable-line no-new
      }).to.throw(/filePath is required/);
    });

  });

  describe("error handling", () => {

    it("should emit an error if FileWriter does", (done) => {
      const dw = new DualWriter({ mode: 1, filePath: "/dev/null" });
      dw.on("error", (err) => {
        expect(err).to.equal("fileWriter error");
        done();
      });
      dw._fileWriter.emit("error", "fileWriter error");
    });
  });

  describe("write()", () => {

    let fileWriteStub;
    let kafkaWriteStub;

    beforeEach(() => {
      fileWriteStub = sandbox.stub(FileWriter.prototype, "write");
      kafkaWriteStub = sandbox.stub(KafkaWriter.prototype, "write");
    });

    it("should call write on both file and kafka writers by default", () => {
      const dualWriter = new DualWriter({ filePath: "/dev/null" });

      dualWriter.write(MESSAGE);
      expect(fileWriteStub).to.have.been.calledOnce;
      expect(fileWriteStub.firstCall.args[0]).to.equal(MESSAGE);
      expect(kafkaWriteStub).to.have.been.calledOnce;
      expect(kafkaWriteStub.firstCall.args[0]).to.equal(MESSAGE);
    });

    it("should call write for filewriter only when mode is 1", () => {
      const dualWriter = new DualWriter({ mode: 1, filePath: "/dev/null" });

      dualWriter.write(MESSAGE);
      expect(fileWriteStub).to.have.been.calledOnce;
      expect(fileWriteStub.firstCall.args[0]).to.be.equal(MESSAGE);
      expect(kafkaWriteStub).to.not.have.been.called;
    });

    it("should write a message only to kafka when mode is 2", () => {
      const dualWriter = new DualWriter({
        mode: 2,
        filePath: "/dev/null"
      });

      dualWriter.write(MESSAGE);
      expect(fileWriteStub).to.not.have.been.called;
      expect(kafkaWriteStub).to.have.been.calledOnce;
      expect(kafkaWriteStub.firstCall.args[0]).to.equal(MESSAGE);
    });
  });

  describe("closeKafka", () => {
    it("should return without error if no kafka writer has been set up", () => {
      const closeClientSpy = sandbox.spy(KafkaWriter.prototype, "closeClient");
      const dualWriter = new DualWriter({ mode: 1, filePath: "/dev/null" });
      expect(dualWriter).to.not.have.property("_kafkaWriter");
      dualWriter.closeKafka();
      expect(closeClientSpy).to.have.not.been.called;
    });

    it("should call kafka writer's closeClient() method", () => {
      const closeClientSpy = sandbox.spy(KafkaWriter.prototype, "closeClient");
      const dualWriter = new DualWriter({ mode: 2, filePath: "/dev/null" });
      expect(dualWriter).to.have.property("_kafkaWriter");
      dualWriter.closeKafka();
      expect(closeClientSpy).to.have.been.calledOnce;
    });
  });
});
