"use strict";

const _ = require("lodash");
const moment = require("moment");
const util = require("util");

const PAYLOAD_REPLACER_REGEX = /([\t\n,=])/g;
const PAYLOAD_ESCAPES = {
  "\n": "\\n",
  "\t": "\\t",
  "=": "//=",
  ",": "//,"
};

const internals = {};

internals.escapePayload = function (input) {
  if (typeof input !== "string") {
    return input;
  }

  return input.replace(PAYLOAD_REPLACER_REGEX, (match) => {
    return PAYLOAD_ESCAPES[match];
  });
};

internals.mapPayload = function (value, key) {
  return util.format("%s=%s", key, internals.escapePayload(value));
};

internals.serializePayload = function (payload) {
  if (_.isString(payload)) {
    return internals.escapePayload(payload);
  }

  return _.map(payload, internals.mapPayload, this).sort().join(",");
};

internals.serializeData = module.exports = function (data) {
  if (!data.epoch) {
    data.epoch = Date.now();
  }

  if (!data.timestamp) {
    data.timestamp = moment.utc(data.epoch).format("YYYY-MM-DD HH:mm:ss.SSS");
  }

  data.payload = internals.serializePayload(data.payload);

  const columns = [
    data.marker,          // 0 - marker
    data.epoch,           // 1 - epoch
    data.timestamp,       // 2 - timestamp
    data.host,            // 3 - host
    data.txId,            // 4 - TxID
    data.level,           // 5 - level
    data.topTxId,         // 6 - topTxID
    data.sessionId,       // 7 - sessionID
    data.tenant,          // 8 - tenant
    data.appId,           // 9 - appID
    data.dataCenter,      // 10 - DC
    data.environment,     // 11 - environment
    data.buildId,         // 12 - buildID
    data.messageId,       // 13 - messageID
    data.type,            // 14 - mType
    data.subType,         // 15 - mSubType
    data.parentTxId,      // 16 - parentTxID
    data.category,        // 17 - category
    data.groupId,         // 18 - groupID
    data.duration,        // 19 - duration
    data.payload          // 20 - payload
  ];

  return columns.join("\t");
};
