"use strict";

const util = require("util");
const _ = require("lodash");
const getClientId = require("./get-client-id");

const assert = require("assert");

// Internals/exported

const internals = {};

internals.toHex = function (number, length) {
  let hex = number.toString(16);

  while (hex.length < length) {
    hex = `0${hex}`;
  }

  return hex.substr(hex.length - length);
};

// See https://confluence.walmart.com/x/AAz2
internals.getTxIdAsync = exports.async = (options, callback) => {
  // options is optional, so check for cb as first arg
  if (_.isFunction(options)) {
    callback = options;
    options = {};
  }
  assert(_.isFunction(callback), "A callback function must be provided.");

  const onClientId = function (error, clientId) {
    options.clientId = clientId;
    callback(error, internals.getTxIdSync(options));
  };

  getClientId(options, onClientId);
};

internals.getTxIdSync = exports.sync = (options) => {
  assert(options, "options object is required");
  assert(options.hasOwnProperty("clientId"), "options.clientId is required");

  ["clientId", "sequence", "threadId", "timestamp"].forEach((opt) => {
    if (options.hasOwnProperty(opt)) {
      assert(_.isSafeInteger(options[opt]),
        `${opt} must be an integer less than or equal to ${Number.MAX_SAFE_INTEGER}`);
      assert(options[opt] >= 0, `${opt} must be greater than or equal to 0`);
    }
  });

  options = _.defaults({}, options, {
    clientId: _.random(1, 0xFFFFFFFF),
    sequence: _.random(1, 0xFFF),
    threadId: process.pid,
    timestamp: Date.now()
  });

  // See https://confluence.walmart.com/x/JAmoAQ
  const txId = util.format(
    "%s-%s-%s%s",
    internals.toHex(options.clientId, 8),
    internals.toHex(options.threadId, 3),
    internals.toHex(options.timestamp, 11),
    internals.toHex(options.sequence, 3)
  );

  return txId;
};
