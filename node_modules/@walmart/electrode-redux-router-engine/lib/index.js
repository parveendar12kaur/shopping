"use strict";

/* eslint-disable max-params, max-len */

const ReduxRouterEngine = require("electrode-redux-router-engine");
const React = require("react");
const ReactDomServer = require("react-dom/server");
const ReactRouter = require("react-router");
const Provider = require("react-redux").Provider;
const ContextProvider = require("./utils/context-provider");

const THOUSAND = 1000.0;
const MILLION = 1000000.0;

const replacers = {
  "<script": encodeURIComponent("<script"),
  "</script>": encodeURIComponent("</script>"),
  "\u2028": "\\u2028",
  "\u2029": "\\u2029"
};

const encodeScript = function encodeScript(str) {
  const rg = new RegExp("<script|</script>|[\u2028\u2029]", "g");
  return str.replace(rg, m => replacers[m]);
};

const getBootstrapScriptWithJsonInitialState = function getBootstrapScriptWithJsonInitialState(storeState) {
  const initialReduxState = `<script id="tb-djs-wml-redux-state" type="application/json">${encodeScript(JSON.stringify(storeState))}</script>`;

  // Efficiently loading inlined JSON data
  // https://quipblog.com/efficiently-loading-inlined-json-data-911960b0ac0a
  const initialReduxStateJs = `window.__WML_REDUX_INITIAL_STATE__ = JSON.parse(document.getElementById("tb-djs-wml-redux-state").textContent)`;

  if (storeState.isInitialStateDeferred) {
    return `${initialReduxState}<script>window._setReduxState = function() {${initialReduxStateJs}};</script>`;
  }

  return `${initialReduxState}<script>{${initialReduxStateJs}}</script>`;
};

const getBootstrapScript = function getBootstrapScript(storeState) {
  const initialReduxState = `window.__WML_REDUX_INITIAL_STATE__ = ${encodeScript(
    JSON.stringify(storeState)
  )};`;

  if (storeState.isInitialStateDeferred) {
    return `window._setReduxState = function() {${initialReduxState}};`;
  }
  return initialReduxState;
};

const renderToString = options => {
  const logSsrTime = options.logSsrTime;
  const ssrCache = options.ssrCache;

  return function(req, store, match, withIds) {
    if (req.app && req.app.disableSSR) {
      return "";
    }

    const doRTS = () => {
      const startTime = logSsrTime && process.hrtime();

      const rts = withIds ? ReactDomServer.renderToString : ReactDomServer.renderToStaticMarkup;
      const html = rts(
        React.createElement(
          ContextProvider,
          {
            requestHeaders: req.headers,
            requestUrl: req.url,
            requestPathParams: match.renderProps.params,
            requestQryParams: req.query,
            seoTags: Object.assign(
              req.app.pageMetadata ? req.app.pageMetadata.getSourceData() : {},
              req.app.seoTags
            ),
            request: req
          },
          React.createElement(
            Provider,
            { store },
            React.createElement(ReactRouter.RouterContext, match.renderProps)
          )
        )
      );

      if (logSsrTime) {
        const endTime = process.hrtime(startTime);
        const ssrTime = endTime[0] * THOUSAND + endTime[1] / MILLION;
        req.log(["info", "logmon", "splunk", "perf"], { url: req.url.path, ssrtime: ssrTime });
      }

      return html;
    };

    if (ssrCache) {
      return ssrCache.get({ req, store, match }).then(r => {
        if (r === undefined) {
          const html = doRTS();
          ssrCache.set({ req, store, match, html });
          return html;
        } else {
          return r;
        }
      });
    }

    return doRTS();
  };
};

module.exports = (routes, initializeReduxStore, options) => {
  // backward compatibility
  if (typeof options === "boolean") {
    options = { withIds: options };
  } else if (!options) {
    options = {};
  }

  options.routes = routes;
  options.createReduxStore = initializeReduxStore;

  if (options.jsonInitialState) {
    options.stringifyPreloadedState = function(storeState) {
      return getBootstrapScriptWithJsonInitialState(options.filterState ? options.filterState(storeState) : storeState);
    };
  } else {
    options.stringifyPreloadedState = function(storeState) {
      return getBootstrapScript(options.filterState ? options.filterState(storeState) : storeState);
    };
  }

  options.renderToString = renderToString(options);

  const engine = new ReduxRouterEngine(options);

  return req => {
    return engine.render(req);
  };
};
