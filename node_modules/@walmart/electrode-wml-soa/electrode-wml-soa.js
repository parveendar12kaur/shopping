"use strict";

const s2sAuth = require("@walmart/s2s-auth-signature");
require("@walmart/wl-soa-esb-bug-patch");

//
// WM headers defined here
// https://confluence.walmart.com/pages/viewpage.action?title=SOA+Header+Elements&spaceKey=PGPSOA
//
const _WM_HEADERS = {
  consumerId: "WM_CONSUMER.ID",
  consumerIp: "WM_CONSUMER.IP",
  consumerTenantId: "WM_CONSUMER.TENANT_ID",
  consumerInTimestamp: "WM_CONSUMER.INTIMESTAMP",
  consumerSourceId: "WM_CONSUMER.SOURCE_ID",
  svcEnv: "WM_SVC.ENV",
  svcVersion: "WM_SVC.VERSION",
  svcName: "WM_SVC.NAME",
  svcInTimestamp: "WM_SVC.INTIMESTAMP",
  svcOutTimestamp: "WM_SVC.OUTTIMESTAMP",
  corrId: "WM_QOS.CORRELATION_ID",
  ifxClientType: "WM_IFX.CLIENT_TYPE",
  ifxServerName: "WM_IFX.SERVER_NAME",
  ifxTransactionId: "WM_IFX.TRANSACTION_ID",
  secAuthToken: "WM_SEC.AUTH_TOKEN",
  secAuthSig: "WM_SEC.AUTH_SIGNATURE",
  secKeyVersion: "WM_SEC.KEY_VERSION",
  signedHeaders: "SignedHeaders",
  wmConsumerName: "WM_CONSUMER.NAME"
};

const _WM_SERVICE_TYPES = {
  endpoint: "ENDPOINT",
  esb: "ESB_PROXY",
  contract: "CONTRACT"
};

//
// https://confluence.walmart.com/display/PGPSSO/Signing+headers+for+S2S+authentication
//
const esbSignHeadersList = [
  _WM_HEADERS.consumerId,
  _WM_HEADERS.consumerInTimestamp,
  _WM_HEADERS.secKeyVersion
].sort();

function signWmHeaders(headers, list, key) {
  headers[_WM_HEADERS.secKeyVersion] = key.version;
  const signature = s2sAuth.generateS2SAuthSignature(headers, key.pemKey, list);
  headers[_WM_HEADERS.secAuthSig] = signature.signatureVal;
  headers[_WM_HEADERS.signedHeaders] = signature.signedParametersList;
}

function signEsbHeaders(headers, privateKey) {
  signWmHeaders(headers, esbSignHeadersList, privateKey);
}

module.exports = {
  wmHeaders: _WM_HEADERS,
  wmServiceTypes: _WM_SERVICE_TYPES,
  esbSignHeadersList,
  signWmHeaders,
  signEsbHeaders
};
