"use strict";

const chai = require("chai");
const Client = require("../../lib/service-registry-client.js");
const fs = require("fs");


const fakeContext = () => {
  return {
    txId: 12345,
    req: {
      log: () => {}
    },
    createChildContext: fakeContext,
    cacheSubtype: () => undefined
  };
};

const meta = {
  meta: {
    corrId: "d1f0c0d2-2cf4-497b-b630-06d609d987b0"
  },
  context: fakeContext(),
  log: () => undefined
};


describe("service-reg-client", function () {

  const create = (config, override, providerName) => {
    return Client.create(config, override, providerName);
  };

  const config = {
    "env": "prod",
    services: {
      "consumerId": "91e1b78e-261b-4676-8317-4cf5bfa24a42",
      "privateKey": {
        "pemKey": fs.readFileSync("test/data/private-key.pem").toString("ascii"),
        "version": 1,
        "algorithm": "RSA",
        "encoding": "PKCS#8"
      },

      providers: {
        registry: {
          "name": "RegistryService",
          "version": "1.0.0"
        }
      }
    }
  };

  this.timeout(15000);

  function testKVP(done, env) {

    const verify = (client) => {
      return client.withMeta(meta).searchByField({
        name: "NAME",
        value: "ppo-indexing-app"
      }).then((resp) => {
        chai.assert.equal(resp.status, 200, "response status not 200");
      });
    };

    config.env = env;

    create(config)
      .then(verify)
      .then(done)
      .catch(done);
  }

  function testSearch(done, env, params) {
    const defaultParams = {
      name: "ppo-indexing-app"
    };

    const verify = (client) => {
      return client.withMeta(meta).search(params || defaultParams).then((resp) => {
        chai.assert.equal(resp.status, 200, "response status not 200");
      });
    };

    config.env = env;

    create(config, {}, Client.providerName)
      .then(verify)
      .then(done)
      .catch(done);
  }

  it("should provide API to search service by KVP field @env=prod", function (done) {
    testKVP(done, "prod");
  });

  it("should provide API to search service by KVP field @env=qa", function (done) {
    testKVP(done, "qa");
  });

  it("should provide API to search service by KVP field @env=null", function (done) {
    testKVP(done, null);
  });

  it("should provide API to search service by name @env=prod", function (done) {
    testSearch(done, "prod");
  });

  it("should provide API to search service by name @env=qa", function (done) {
    testSearch(done, "qa", {environment: "qa", name: "platform-iam-server", serVersion: "2.0.0"});
  });

  it("should provide API to search service by name @env=null", function (done) {
    testSearch(done, null);
  });

});
