"use strict";

/* eslint-disable no-magic-numbers,max-statements */

// Electrode Health Check Plugin
const _ = require("lodash");
const Boom = require("boom");
const Fs = require("fs");
const Path = require("path");
const pathJoin = Path.posix.join;

function health(server, options, next) {
  const startTime = Date.now();

  const config = _.get(server, "app.config", {});

  // health check on the app always run on {basePath}/status
  // NOTE: if apps do not configure any paths for Server-Health-Check
  // then this Electrode would default it to https://{basePath}/status
  const akamaiLivenessTestPath = "/akamai-liveness-test";
  // Add settings value to take the VM out of rotation by sending a false status to LB
  const settings = {
    outOfRotation: false,
    outOfRotationError: Boom.serverUnavailable("out of Rotation", "Set manually")
  };

  const fullPath = path => {
    const ui = config.ui || {};
    return pathJoin(ui.basePath || "", path);
  };

  const outTimefile = Path.resolve(".ecv_out_of_rotation");
  let currentOutTime;

  const isOutOfRotation = forceTimeCheck => {
    //
    // - only check time file if currently not out of rotation by flag
    // - or if forceTimeCheck is true.
    //
    if (forceTimeCheck || !settings.outOfRotation) {
      try {
        currentOutTime = JSON.parse(Fs.readFileSync(outTimefile).toString()).outOfRotationTime;
      } catch (e) {
        currentOutTime = 0;
      }

      settings.outOfRotation = currentOutTime >= startTime;
    }

    return settings.outOfRotation;
  };

  const restoreInRotation = () => {
    try {
      Fs.unlinkSync(outTimefile);
    } catch (e) {
      if (e.code !== "ENOENT") {
        throw new Error(`fail trying to remove out of rotation time file: ${e.message}`);
      }
    }

    currentOutTime = undefined;
    settings.outOfRotation = false;
  };

  const setOutOfRotation = () => {
    const outOfRotationTime = Date.now();
    Fs.writeFileSync(outTimefile, JSON.stringify({ outOfRotationTime }));

    currentOutTime = outOfRotationTime;
    settings.outOfRotation = true;
  };

  const handleOutOfRotation = flag => {
    if (flag === "true") {
      setOutOfRotation();
    } else if (flag === "timecheck") {
      isOutOfRotation(true);
    } else if (flag !== "check" && isOutOfRotation()) {
      restoreInRotation();
    }
  };

  server.route({
    path: fullPath("/ecv-status"),
    method: ["GET"],
    config: {
      auth: false,
      handler: function(request, reply) {
        const rotationFlag = _.get(request, "query.outOfRotation");
        if (typeof rotationFlag === "string") {
          try {
            handleOutOfRotation(rotationFlag.toLowerCase());
            const isOut = isOutOfRotation();
            const resp = { status: isOut ? "OUT_OF_ROTATION" : "IN_ROTATION" };
            if (currentOutTime) {
              resp.serverStartTime = new Date(startTime).toLocaleString();
              resp.timestamp = new Date(currentOutTime).toLocaleString();
              resp.now = new Date().toLocaleString();
              if (isOut) {
                resp.duration = `${(Date.now() - currentOutTime) / 1000} seconds`;
              }
            }
            return reply(resp);
          } catch (e) {
            return reply(Boom.internal(e.message));
          }
        } else if (isOutOfRotation()) {
          return reply(settings.outOfRotationError);
        } else {
          return reply({ status: "OK" });
        }
      }
    }
  });

  server.route({
    path: fullPath(akamaiLivenessTestPath),
    method: ["GET"],
    config: {
      auth: false,
      handler: function(request, reply) {
        reply({
          status: "OK"
        });
      }
    }
  });

  next();
}

health.attributes = {
  pkg: {
    name: "health"
  }
};

module.exports = health;
